// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RendererType
#include <lime/graphics/RendererType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMTextField
#include <openfl/_internal/renderer/dom/DOMTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShape
#include <openfl/_internal/renderer/opengl/GLShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLTextField
#include <openfl/_internal/renderer/opengl/GLTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_HTMLParser
#include <openfl/_internal/text/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_177_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",177,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_212_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",212,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_228_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",228,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_247_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",247,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_294_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",294,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_322_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",322,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_349_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",349,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_370_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",370,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_400_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",400,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_425_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",425,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_446_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",446,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_477_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",477,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_490_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",490,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_536_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",536,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_543_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",543,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_548_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",548,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_558_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",558,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_698_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",698,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_725___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",725,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_732___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",732,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_745___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",745,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_774___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",774,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_783___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",783,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_812___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",812,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_821___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",821,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_850___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",850,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_864___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",864,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_900___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",900,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_925___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",925,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1068___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1068,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1074___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1074,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1091___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1091,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1128___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1128,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1172___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1172,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1191___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1191,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1247___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1247,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1283___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1283,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1311___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1311,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1330___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1330,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1352___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",1352,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1429___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",1429,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1473___renderDOMClear,"openfl.text.TextField","__renderDOMClear",0x09e66c65,"openfl.text.TextField.__renderDOMClear","openfl/text/TextField.hx",1473,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1478___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",1478,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1498___renderGLMask,"openfl.text.TextField","__renderGLMask",0x687ab3cb,"openfl.text.TextField.__renderGLMask","openfl/text/TextField.hx",1498,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1507___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",1507,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1541___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",1541,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1625___shouldCacheHardware,"openfl.text.TextField","__shouldCacheHardware",0x836d1d13,"openfl.text.TextField.__shouldCacheHardware","openfl/text/TextField.hx",1625,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1630___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",1630,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1640___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",1640,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1660___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",1660,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1680___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",1680,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1693___updateCacheBitmap,"openfl.text.TextField","__updateCacheBitmap",0xf1f52f84,"openfl.text.TextField.__updateCacheBitmap","openfl/text/TextField.hx",1693,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1717___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",1717,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1759___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",1759,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1805___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",1805,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1848___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",1848,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1865_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",1865,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1870_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",1870,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1885_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",1885,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1890_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",1890,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1907_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",1907,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1912_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",1912,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1928_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1928,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1933_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1933,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1949_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1949,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1954_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1954,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1970_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1970,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1975_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1975,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1989_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1989,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1998_get_cacheAsBitmap,"openfl.text.TextField","get_cacheAsBitmap",0xd9261d96,"openfl.text.TextField.get_cacheAsBitmap","openfl/text/TextField.hx",1998,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2009_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2009,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2016_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2016,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2021_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2021,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2036_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2036,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2041_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2041,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2061_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2075_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2075,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2082_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2082,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2096_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2096,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2101_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2101,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2109_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2109,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2132_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2132,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2138_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2138,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2196_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2196,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2211_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2211,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2216_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2216,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2233_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2233,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2242_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2242,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2253_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2253,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2260_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2260,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2267_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2267,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2272_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2272,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2289_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2289,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2300_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2300,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2305_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2305,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2321_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2321,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2326_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2326,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2348_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2348,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2353_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2353,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2375_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2375,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2380_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2380,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2403_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2403,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2410_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2410,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2417_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2417,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2422_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2422,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2438_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2438,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2445_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2445,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2450_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2450,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2487_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2487,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2492_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2492,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2511_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2511,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2519_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2519,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2529_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2529,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2534_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",2534,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2565_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",2565,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2573_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",2573,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2593_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",2593,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2598_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",2598,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2615_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",2615,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2620_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",2620,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2630_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",2630,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2635_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",2635,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2650_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",2650,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2684_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",2684,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2731_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",2731,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2738_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",2738,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2747_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",2747,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2783_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",2783,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2796_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",2796,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2820_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",2820,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3065_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3065,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_71_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",71,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_177_new)
HXLINE( 179)		super::__construct();
HXLINE( 181)		this->_hx___caretIndex = (int)-1;
HXLINE( 182)		this->_hx___displayAsPassword = false;
HXLINE( 183)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 184)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 185)		this->_hx___layoutDirty = true;
HXLINE( 186)		this->_hx___offsetX = (int)0;
HXLINE( 187)		this->_hx___offsetY = (int)0;
HXLINE( 188)		this->_hx___mouseWheelEnabled = true;
HXLINE( 189)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 191)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 193)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 194)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 195)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 196)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 197)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 201)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 202)		{
HXLINE( 202)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 202)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0));
            		}
HXLINE( 204)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 205)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 206)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 207)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_212_appendText)
HXLINE( 214)		bool _hx_tmp;
HXDLIN( 214)		if (hx::IsNotNull( text )) {
HXLINE( 214)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 214)			_hx_tmp = true;
            		}
HXDLIN( 214)		if (_hx_tmp) {
HXLINE( 214)			return;
            		}
HXLINE( 216)		this->_hx___dirty = true;
HXLINE( 217)		this->_hx___layoutDirty = true;
HXLINE( 218)		if (!(this->_hx___renderDirty)) {
HXLINE( 218)			this->_hx___renderDirty = true;
HXDLIN( 218)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 220)		this->_hx___updateText(::lime::text::_UTF8String::UTF8String_Impl__obj::plus(this->_hx___text,text));
HXLINE( 222)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 222)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE( 223)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_228_getCharBoundaries)
HXLINE( 230)		bool _hx_tmp;
HXDLIN( 230)		if ((charIndex >= (int)0)) {
HXLINE( 230)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 230)			_hx_tmp = true;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 230)			return null();
            		}
HXLINE( 232)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 234)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 236)			return rect;
            		}
            		else {
HXLINE( 240)			return null();
            		}
HXLINE( 234)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_247_getCharIndexAtPoint)
HXLINE( 249)		bool _hx_tmp;
HXDLIN( 249)		bool _hx_tmp1;
HXDLIN( 249)		bool _hx_tmp2;
HXDLIN( 249)		if (!((x <= (int)2))) {
HXLINE( 249)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 249)			_hx_tmp2 = true;
            		}
HXDLIN( 249)		if (!(_hx_tmp2)) {
HXLINE( 249)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 249)			_hx_tmp1 = true;
            		}
HXDLIN( 249)		if (!(_hx_tmp1)) {
HXLINE( 249)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 249)			_hx_tmp = true;
            		}
HXDLIN( 249)		if (_hx_tmp) {
HXLINE( 249)			return (int)-1;
            		}
HXLINE( 251)		this->_hx___updateLayout();
HXLINE( 253)		x = (x + this->get_scrollH());
HXLINE( 255)		{
HXLINE( 255)			int _g1 = (int)0;
HXDLIN( 255)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 255)			while((_g1 < _g)){
HXLINE( 255)				_g1 = (_g1 + (int)1);
HXDLIN( 255)				int i = (_g1 - (int)1);
HXLINE( 257)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 261)		{
HXLINE( 261)			int _g2 = (int)0;
HXDLIN( 261)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 261)			while((_g2 < _g11->get_length())){
HXLINE( 261)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 261)				_g2 = (_g2 + (int)1);
HXLINE( 263)				bool _hx_tmp3;
HXDLIN( 263)				if ((y >= group->offsetY)) {
HXLINE( 263)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 263)					_hx_tmp3 = false;
            				}
HXDLIN( 263)				if (_hx_tmp3) {
HXLINE( 265)					bool _hx_tmp4;
HXDLIN( 265)					if ((x >= group->offsetX)) {
HXLINE( 265)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 265)						_hx_tmp4 = false;
            					}
HXDLIN( 265)					if (_hx_tmp4) {
HXLINE( 267)						Float advance = ((Float)0.0);
HXLINE( 269)						{
HXLINE( 269)							int _g3 = (int)0;
HXDLIN( 269)							int _g21 = group->positions->length;
HXDLIN( 269)							while((_g3 < _g21)){
HXLINE( 269)								_g3 = (_g3 + (int)1);
HXDLIN( 269)								int i1 = (_g3 - (int)1);
HXLINE( 271)								Float advance1;
HXDLIN( 271)								bool advance2;
HXDLIN( 271)								if ((i1 >= (int)0)) {
HXLINE( 271)									advance2 = (i1 < group->positions->length);
            								}
            								else {
HXLINE( 271)									advance2 = false;
            								}
HXDLIN( 271)								if (advance2) {
HXLINE( 271)									advance1 = group->positions->__get(i1).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 271)									advance1 = (int)0;
            								}
HXDLIN( 271)								advance = (advance + advance1);
HXLINE( 273)								if ((x <= (group->offsetX + advance))) {
HXLINE( 275)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 281)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 289)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_294_getFirstCharInParagraph)
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		if ((charIndex >= (int)0)) {
HXLINE( 296)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 296)			_hx_tmp = true;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 296)			return (int)0;
            		}
HXLINE( 298)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 299)		int startIndex = (int)0;
HXLINE( 301)		while((index > (int)-1)){
HXLINE( 303)			if ((index <= charIndex)) {
HXLINE( 305)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 307)				if ((index > charIndex)) {
HXLINE( 309)					goto _hx_goto_7;
            				}
            			}
HXLINE( 313)			 ::openfl::_internal::text::TextEngine index1 = this->_hx___textEngine;
HXDLIN( 313)			index = index1->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_7:;
HXLINE( 317)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_322_getLineIndexAtPoint)
HXLINE( 324)		this->_hx___updateLayout();
HXLINE( 326)		bool _hx_tmp;
HXDLIN( 326)		bool _hx_tmp1;
HXDLIN( 326)		bool _hx_tmp2;
HXDLIN( 326)		if (!((x <= (int)2))) {
HXLINE( 326)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 326)			_hx_tmp2 = true;
            		}
HXDLIN( 326)		if (!(_hx_tmp2)) {
HXLINE( 326)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 326)			_hx_tmp1 = true;
            		}
HXDLIN( 326)		if (!(_hx_tmp1)) {
HXLINE( 326)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 326)			_hx_tmp = true;
            		}
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 326)			return (int)-1;
            		}
HXLINE( 328)		{
HXLINE( 328)			int _g1 = (int)0;
HXDLIN( 328)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 328)			while((_g1 < _g)){
HXLINE( 328)				_g1 = (_g1 + (int)1);
HXDLIN( 328)				int i = (_g1 - (int)1);
HXLINE( 330)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 334)		{
HXLINE( 334)			int _g2 = (int)0;
HXDLIN( 334)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 334)			while((_g2 < _g11->get_length())){
HXLINE( 334)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 334)				_g2 = (_g2 + (int)1);
HXLINE( 336)				bool _hx_tmp3;
HXDLIN( 336)				if ((y >= group->offsetY)) {
HXLINE( 336)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 336)					_hx_tmp3 = false;
            				}
HXDLIN( 336)				if (_hx_tmp3) {
HXLINE( 338)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 344)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_349_getLineIndexOfChar)
HXLINE( 351)		bool _hx_tmp;
HXDLIN( 351)		if ((charIndex >= (int)0)) {
HXLINE( 351)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 351)			_hx_tmp = true;
            		}
HXDLIN( 351)		if (_hx_tmp) {
HXLINE( 351)			return (int)-1;
            		}
HXLINE( 353)		this->_hx___updateLayout();
HXLINE( 355)		{
HXLINE( 355)			int _g = (int)0;
HXDLIN( 355)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 355)			while((_g < _g1->get_length())){
HXLINE( 355)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 355)				_g = (_g + (int)1);
HXLINE( 357)				bool _hx_tmp1;
HXDLIN( 357)				if ((group->startIndex <= charIndex)) {
HXLINE( 357)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 357)					_hx_tmp1 = false;
            				}
HXDLIN( 357)				if (_hx_tmp1) {
HXLINE( 359)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 365)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_370_getLineLength)
HXLINE( 372)		this->_hx___updateLayout();
HXLINE( 374)		bool _hx_tmp;
HXDLIN( 374)		if ((lineIndex >= (int)0)) {
HXLINE( 374)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 374)			_hx_tmp = true;
            		}
HXDLIN( 374)		if (_hx_tmp) {
HXLINE( 374)			return (int)0;
            		}
HXLINE( 376)		int startIndex = (int)-1;
HXLINE( 377)		int endIndex = (int)-1;
HXLINE( 379)		{
HXLINE( 379)			int _g = (int)0;
HXDLIN( 379)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 379)			while((_g < _g1->get_length())){
HXLINE( 379)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 379)				_g = (_g + (int)1);
HXLINE( 381)				if ((group->lineIndex == lineIndex)) {
HXLINE( 383)					if ((startIndex == (int)-1)) {
HXLINE( 383)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 385)					int group1 = group->lineIndex;
HXDLIN( 385)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 387)						endIndex = group->startIndex;
HXLINE( 388)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE( 394)		if ((endIndex == (int)-1)) {
HXLINE( 394)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 395)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_400_getLineMetrics)
HXLINE( 402)		this->_hx___updateLayout();
HXLINE( 404)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE( 405)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE( 406)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE( 407)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE( 408)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE( 412)		Float margin;
HXDLIN( 412)		 ::Dynamic _g = this->_hx___textFormat->align;
HXDLIN( 412)		 ::Dynamic _hx_switch_0 = _g;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 412)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 412)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 412)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 412)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 412)			margin = (int)2;
HXDLIN( 412)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE( 420)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_425_getLineOffset)
HXLINE( 427)		this->_hx___updateLayout();
HXLINE( 429)		bool _hx_tmp;
HXDLIN( 429)		if ((lineIndex >= (int)0)) {
HXLINE( 429)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 429)			_hx_tmp = true;
            		}
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 429)			return (int)-1;
            		}
HXLINE( 431)		{
HXLINE( 431)			int _g = (int)0;
HXDLIN( 431)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 431)			while((_g < _g1->get_length())){
HXLINE( 431)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 431)				_g = (_g + (int)1);
HXLINE( 433)				if ((group->lineIndex == lineIndex)) {
HXLINE( 435)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 441)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_446_getLineText)
HXLINE( 448)		this->_hx___updateLayout();
HXLINE( 450)		bool _hx_tmp;
HXDLIN( 450)		if ((lineIndex >= (int)0)) {
HXLINE( 450)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 450)			_hx_tmp = true;
            		}
HXDLIN( 450)		if (_hx_tmp) {
HXLINE( 450)			return null();
            		}
HXLINE( 452)		int startIndex = (int)-1;
HXLINE( 453)		int endIndex = (int)-1;
HXLINE( 455)		{
HXLINE( 455)			int _g = (int)0;
HXDLIN( 455)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 455)			while((_g < _g1->get_length())){
HXLINE( 455)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 455)				_g = (_g + (int)1);
HXLINE( 457)				if ((group->lineIndex == lineIndex)) {
HXLINE( 459)					if ((startIndex == (int)-1)) {
HXLINE( 459)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 461)					int group1 = group->lineIndex;
HXDLIN( 461)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 463)						endIndex = group->startIndex;
HXLINE( 464)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE( 470)		if ((endIndex == (int)-1)) {
HXLINE( 470)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 472)		return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___textEngine->text,startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_477_getParagraphLength)
HXLINE( 479)		bool _hx_tmp;
HXDLIN( 479)		if ((charIndex >= (int)0)) {
HXLINE( 479)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 479)			_hx_tmp = true;
            		}
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 479)			return (int)0;
            		}
HXLINE( 481)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE( 482)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE( 484)		if ((endIndex == (int)0)) {
HXLINE( 484)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 485)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_490_getTextFormat)
HXLINE( 492)		 ::openfl::text::TextFormat format = null();
HXLINE( 494)		{
HXLINE( 494)			int _g = (int)0;
HXDLIN( 494)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 494)			while((_g < _g1->get_length())){
HXLINE( 494)				 ::openfl::_internal::text::TextFormatRange group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 494)				_g = (_g + (int)1);
HXLINE( 496)				bool _hx_tmp;
HXDLIN( 496)				bool _hx_tmp1;
HXDLIN( 496)				if ((group->start <= beginIndex)) {
HXLINE( 496)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 496)					_hx_tmp1 = false;
            				}
HXDLIN( 496)				if (!(_hx_tmp1)) {
HXLINE( 496)					if ((group->start <= endIndex)) {
HXLINE( 496)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 496)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 496)					_hx_tmp = true;
            				}
HXDLIN( 496)				if (_hx_tmp) {
HXLINE( 498)					if (hx::IsNull( format )) {
HXLINE( 500)						format = group->format->clone();
            					}
            					else {
HXLINE( 504)						if ((group->format->font != format->font)) {
HXLINE( 504)							format->font = null();
            						}
HXLINE( 505)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE( 505)							format->size = null();
            						}
HXLINE( 506)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE( 506)							format->color = null();
            						}
HXLINE( 507)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE( 507)							format->bold = null();
            						}
HXLINE( 508)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE( 508)							format->italic = null();
            						}
HXLINE( 509)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE( 509)							format->underline = null();
            						}
HXLINE( 510)						if ((group->format->url != format->url)) {
HXLINE( 510)							format->url = null();
            						}
HXLINE( 511)						if ((group->format->target != format->target)) {
HXLINE( 511)							format->target = null();
            						}
HXLINE( 512)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE( 512)							format->align = null();
            						}
HXLINE( 513)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE( 513)							format->leftMargin = null();
            						}
HXLINE( 514)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE( 514)							format->rightMargin = null();
            						}
HXLINE( 515)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE( 515)							format->indent = null();
            						}
HXLINE( 516)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE( 516)							format->leading = null();
            						}
HXLINE( 517)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE( 517)							format->blockIndent = null();
            						}
HXLINE( 518)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE( 518)							format->bullet = null();
            						}
HXLINE( 519)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE( 519)							format->kerning = null();
            						}
HXLINE( 520)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE( 520)							format->letterSpacing = null();
            						}
HXLINE( 521)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 521)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 529)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_536_replaceSelectedText)
HXDLIN( 536)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_543_replaceText)
HXDLIN( 543)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_548_setSelection)
HXLINE( 550)		this->_hx___selectionIndex = beginIndex;
HXLINE( 551)		this->_hx___caretIndex = endIndex;
HXLINE( 552)		this->_hx___stopCursorTimer();
HXLINE( 553)		this->_hx___startCursorTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_558_setTextFormat)
HXLINE( 560)		int max = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE( 561)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 563)		if ((beginIndex < (int)0)) {
HXLINE( 563)			beginIndex = (int)0;
            		}
HXLINE( 564)		if ((endIndex < (int)0)) {
HXLINE( 564)			endIndex = (int)0;
            		}
HXLINE( 566)		if ((endIndex == (int)0)) {
HXLINE( 568)			if ((beginIndex == (int)0)) {
HXLINE( 570)				endIndex = max;
            			}
            			else {
HXLINE( 574)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE( 580)		if ((endIndex < beginIndex)) {
HXLINE( 580)			return;
            		}
HXLINE( 582)		bool _hx_tmp;
HXDLIN( 582)		if ((beginIndex == (int)0)) {
HXLINE( 582)			_hx_tmp = (endIndex >= max);
            		}
            		else {
HXLINE( 582)			_hx_tmp = false;
            		}
HXDLIN( 582)		if (_hx_tmp) {
HXLINE( 586)			this->_hx___textFormat->_hx___merge(format);
HXLINE( 588)			{
HXLINE( 588)				int _g1 = (int)0;
HXDLIN( 588)				int _g = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN( 588)				while((_g1 < _g)){
HXLINE( 588)					_g1 = (_g1 + (int)1);
HXDLIN( 588)					int i = (_g1 - (int)1);
HXLINE( 590)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 591)					range->format->_hx___merge(this->_hx___textFormat);
            				}
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_698_setTextFormat)
HXLINE( 700)				bool _hx_tmp3;
HXDLIN( 700)				if ((a->start >= b->start)) {
HXLINE( 700)					_hx_tmp3 = (a->end < b->end);
            				}
            				else {
HXLINE( 700)					_hx_tmp3 = true;
            				}
HXDLIN( 700)				if (_hx_tmp3) {
HXLINE( 702)					return (int)-1;
            				}
            				else {
HXLINE( 704)					bool _hx_tmp4;
HXDLIN( 704)					if ((a->start <= b->start)) {
HXLINE( 704)						_hx_tmp4 = (a->end > b->end);
            					}
            					else {
HXLINE( 704)						_hx_tmp4 = true;
            					}
HXDLIN( 704)					if (_hx_tmp4) {
HXLINE( 706)						return (int)1;
            					}
            				}
HXLINE( 710)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 597)			int index = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE( 598)			int searchIndex;
HXLINE( 600)			while((index > (int)0)){
HXLINE( 602)				index = (index - (int)1);
HXLINE( 603)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 605)				bool _hx_tmp1;
HXDLIN( 605)				if ((range->start == beginIndex)) {
HXLINE( 605)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE( 605)					_hx_tmp1 = false;
            				}
HXDLIN( 605)				if (_hx_tmp1) {
HXLINE( 609)					range->format = this->_hx___textFormat->clone();
HXLINE( 610)					range->format->_hx___merge(format);
HXLINE( 611)					return;
            				}
HXLINE( 615)				bool _hx_tmp2;
HXDLIN( 615)				if ((range->start >= beginIndex)) {
HXLINE( 615)					_hx_tmp2 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 615)					_hx_tmp2 = false;
            				}
HXDLIN( 615)				if (_hx_tmp2) {
HXLINE( 619)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,(int)0);
HXLINE( 621)					if ((searchIndex > (int)-1)) {
HXLINE( 623)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 631)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN( 631)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE( 635)			if ((beginIndex > (int)0)) {
HXLINE( 637)				int _g11 = (int)0;
HXDLIN( 637)				int _g2 = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN( 637)				while((_g11 < _g2)){
HXLINE( 637)					_g11 = (_g11 + (int)1);
HXDLIN( 637)					int i1 = (_g11 - (int)1);
HXLINE( 639)					range = this->_hx___textEngine->textFormatRanges->get(i1).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 641)					if ((range->end >= beginIndex)) {
HXLINE( 643)						prevRange = range;
HXLINE( 645)						goto _hx_goto_30;
            					}
            				}
            				_hx_goto_30:;
            			}
HXLINE( 652)			if ((endIndex < max)) {
HXLINE( 654)				int ni = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE( 656)				while(true){
HXLINE( 656)					ni = (ni - (int)1);
HXDLIN( 656)					if (!((ni >= (int)0))) {
HXLINE( 656)						goto _hx_goto_31;
            					}
HXLINE( 658)					range = this->_hx___textEngine->textFormatRanges->get(ni).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 660)					if ((range->start <= endIndex)) {
HXLINE( 662)						nextRange = range;
HXLINE( 664)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXLINE( 672)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE( 676)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN( 676)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE( 677)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE( 681)			if (hx::IsNotNull( prevRange )) {
HXLINE( 683)				prevRange->end = beginIndex;
            			}
HXLINE( 687)			if (hx::IsNotNull( nextRange )) {
HXLINE( 689)				nextRange->start = endIndex;
            			}
HXLINE( 693)			 ::openfl::text::TextFormat textFormat = this->_hx___textFormat->clone();
HXLINE( 694)			textFormat->_hx___merge(format);
HXLINE( 696)			{
HXLINE( 696)				::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 696)				( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex));
            			}
HXLINE( 698)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 716)		this->_hx___dirty = true;
HXLINE( 717)		this->_hx___layoutDirty = true;
HXLINE( 718)		if (!(this->_hx___renderDirty)) {
HXLINE( 718)			this->_hx___renderDirty = true;
HXDLIN( 718)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_725___allowMouseFocus)
HXDLIN( 725)		bool _hx_tmp;
HXDLIN( 725)		if (hx::IsNotEq( this->_hx___textEngine->type,(int)1 )) {
HXDLIN( 725)			_hx_tmp = this->get_tabEnabled();
            		}
            		else {
HXDLIN( 725)			_hx_tmp = true;
            		}
HXDLIN( 725)		if (!(_hx_tmp)) {
HXDLIN( 725)			return this->get_selectable();
            		}
            		else {
HXDLIN( 725)			return true;
            		}
HXDLIN( 725)		return false;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_732___caretBeginningOfLine)
HXDLIN( 732)		bool _hx_tmp;
HXDLIN( 732)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN( 732)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN( 732)			_hx_tmp = true;
            		}
HXDLIN( 732)		if (_hx_tmp) {
HXLINE( 734)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE( 738)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_745___caretEndOfLine)
HXLINE( 747)		int lineIndex;
HXLINE( 749)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE( 751)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE( 755)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE( 759)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE( 761)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE( 765)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_774___caretNextCharacter)
HXDLIN( 774)		int _hx_tmp = this->_hx___caretIndex;
HXDLIN( 774)		if ((_hx_tmp < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 776)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_783___caretNextLine)
HXLINE( 785)		if (hx::IsNull( lineIndex )) {
HXLINE( 787)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 791)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE( 793)			if (hx::IsNull( caretIndex )) {
HXLINE( 795)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 799)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE( 803)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_812___caretPreviousCharacter)
HXDLIN( 812)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE( 814)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_821___caretPreviousLine)
HXLINE( 823)		if (hx::IsNull( lineIndex )) {
HXLINE( 825)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 829)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE( 831)			if (hx::IsNull( caretIndex )) {
HXLINE( 833)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 837)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE( 841)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_850___disableInput)
HXDLIN( 850)		bool _hx_tmp;
HXDLIN( 850)		if (this->_hx___inputEnabled) {
HXDLIN( 850)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN( 850)			_hx_tmp = false;
            		}
HXDLIN( 850)		if (_hx_tmp) {
HXLINE( 852)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE( 853)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE( 854)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE( 856)			this->_hx___inputEnabled = false;
HXLINE( 857)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_864___dispatch)
HXLINE( 866)		bool _hx_tmp;
HXDLIN( 866)		if ((event->eventPhase == (int)2)) {
HXLINE( 866)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 866)			_hx_tmp = false;
            		}
HXDLIN( 866)		if (_hx_tmp) {
HXLINE( 868)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 869)			Float group = this->get_mouseX();
HXDLIN( 869)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE( 871)			if (hx::IsNotNull( group1 )) {
HXLINE( 873)				::String url = group1->format->url;
HXLINE( 875)				bool _hx_tmp1;
HXDLIN( 875)				if (hx::IsNotNull( url )) {
HXLINE( 875)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 875)					_hx_tmp1 = false;
            				}
HXDLIN( 875)				if (_hx_tmp1) {
HXLINE( 877)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE( 879)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr((int)6,null())));
            					}
            					else {
HXLINE( 883)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE( 893)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_900___enableInput)
HXDLIN( 900)		if (hx::IsNotNull( this->stage )) {
HXLINE( 902)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 904)			if (!(this->_hx___inputEnabled)) {
HXLINE( 906)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 908)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE( 910)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE( 911)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE( 915)				this->_hx___inputEnabled = true;
HXLINE( 916)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_925___fromSymbol)
HXLINE( 927)		this->_hx___symbol = symbol;
HXLINE( 929)		this->set_width(symbol->width);
HXLINE( 930)		this->set_height(symbol->height);
HXLINE( 932)		this->_hx___offsetX = symbol->x;
HXLINE( 933)		this->_hx___offsetY = symbol->y;
HXLINE( 935)		this->set_multiline(symbol->multiline);
HXLINE( 936)		this->set_wordWrap(symbol->wordWrap);
HXLINE( 937)		this->set_displayAsPassword(symbol->password);
HXLINE( 939)		if (symbol->border) {
HXLINE( 941)			this->set_border(true);
HXLINE( 942)			this->set_background(true);
            		}
HXLINE( 946)		this->set_selectable(symbol->selectable);
HXLINE( 948)		if (symbol->input) {
HXLINE( 950)			this->set_type((int)1);
            		}
HXLINE( 954)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 955)		if (hx::IsNotNull( symbol->color )) {
HXLINE( 955)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE( 956)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE( 958)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE( 960)		if (hx::IsNotNull( font )) {
HXLINE( 970)			format->_hx___ascent = ((Float)((Float)font->ascent / (Float)(int)20) / (Float)(int)1024);
HXLINE( 971)			format->_hx___descent = ((Float)((Float)font->descent / (Float)(int)20) / (Float)(int)1024);
            		}
HXLINE( 975)		format->font = symbol->fontName;
HXLINE( 977)		bool found = false;
HXLINE( 979)		{
HXLINE( 979)			::String _g = format->font;
HXDLIN( 979)			if (hx::IsNull( _g )) {
HXLINE( 983)				found = true;
            			}
            			else {
HXLINE( 979)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 983)					found = true;
HXDLIN( 983)					goto _hx_goto_45;
            				}
            				/* default */{
HXLINE( 987)					int _g1 = (int)0;
HXDLIN( 987)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN( 987)					while((_g1 < _g11->length)){
HXLINE( 987)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN( 987)						_g1 = (_g1 + (int)1);
HXLINE( 989)						if ((font1->name == format->font)) {
HXLINE( 991)							found = true;
HXLINE( 992)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
            				_hx_goto_45:;
            			}
            		}
HXLINE(1000)		if (!(found)) {
HXLINE(1002)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("g",67,00,00,00));
HXLINE(1004)			{
HXLINE(1004)				int _g12 = (int)0;
HXDLIN(1004)				::Array< ::Dynamic> _g2 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1004)				while((_g12 < _g2->length)){
HXLINE(1004)					 ::openfl::text::Font font2 = _g2->__get(_g12).StaticCast<  ::openfl::text::Font >();
HXDLIN(1004)					_g12 = (_g12 + (int)1);
HXLINE(1006)					::String _hx_tmp = alpha->replace(font2->name,HX_("",00,00,00,00)).substr((int)0,symbol->fontName.length);
HXDLIN(1006)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1008)						format->font = font2->name;
HXLINE(1009)						found = true;
HXLINE(1010)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            		}
HXLINE(1018)		if (found) {
HXLINE(1020)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1022)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1024)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1025)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),1025,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1029)		if (hx::IsNotNull( symbol->align )) {
HXLINE(1031)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1031)				format->align = (int)0;
            			}
            			else {
HXLINE(1032)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1032)					format->align = (int)4;
            				}
            				else {
HXLINE(1033)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1033)						format->align = (int)2;
            					}
            				}
            			}
HXLINE(1035)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE(1036)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE(1037)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE(1038)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
            		}
HXLINE(1042)		this->set_defaultTextFormat(format);
HXLINE(1044)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1046)			if (symbol->html) {
HXLINE(1048)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1052)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1068___getAdvance)
HXDLIN(1068)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1074___getBounds)
HXLINE(1076)		this->_hx___updateLayout();
HXLINE(1078)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1079)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1080)		 ::openfl::geom::Rectangle bounds1 = bounds;
HXDLIN(1080)		bounds1->x = (bounds1->x + this->_hx___offsetX);
HXLINE(1081)		 ::openfl::geom::Rectangle bounds2 = bounds;
HXDLIN(1081)		bounds2->y = (bounds2->y + this->_hx___offsetY);
HXLINE(1082)		bounds->_hx___transform(bounds,matrix);
HXLINE(1084)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1086)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1091___getCharBoundaries)
HXLINE(1093)		bool _hx_tmp;
HXDLIN(1093)		if ((charIndex >= (int)0)) {
HXLINE(1093)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE(1093)			_hx_tmp = true;
            		}
HXDLIN(1093)		if (_hx_tmp) {
HXLINE(1093)			return false;
            		}
HXLINE(1095)		this->_hx___updateLayout();
HXLINE(1097)		{
HXLINE(1097)			int _g = (int)0;
HXDLIN(1097)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1097)			while((_g < _g1->get_length())){
HXLINE(1097)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1097)				_g = (_g + (int)1);
HXLINE(1099)				bool _hx_tmp1;
HXDLIN(1099)				if ((charIndex >= group->startIndex)) {
HXLINE(1099)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1099)					_hx_tmp1 = false;
            				}
HXDLIN(1099)				if (_hx_tmp1) {
HXLINE(1101)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1103)						Float x = group->offsetX;
HXLINE(1105)						{
HXLINE(1105)							int _g3 = (int)0;
HXDLIN(1105)							int _g2 = (charIndex - group->startIndex);
HXDLIN(1105)							while((_g3 < _g2)){
HXLINE(1105)								_g3 = (_g3 + (int)1);
HXDLIN(1105)								int i = (_g3 - (int)1);
HXLINE(1107)								Float x1;
HXDLIN(1107)								bool x2;
HXDLIN(1107)								if ((i >= (int)0)) {
HXLINE(1107)									x2 = (i < group->positions->length);
            								}
            								else {
HXLINE(1107)									x2 = false;
            								}
HXDLIN(1107)								if (x2) {
HXLINE(1107)									x1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1107)									x1 = (int)0;
            								}
HXDLIN(1107)								x = (x + x1);
            							}
            						}
HXLINE(1112)						int index = (charIndex - group->startIndex);
HXDLIN(1112)						Float lastPosition;
HXDLIN(1112)						bool lastPosition1;
HXDLIN(1112)						if ((index >= (int)0)) {
HXLINE(1112)							lastPosition1 = (index < group->positions->length);
            						}
            						else {
HXLINE(1112)							lastPosition1 = false;
            						}
HXDLIN(1112)						if (lastPosition1) {
HXLINE(1112)							lastPosition = group->positions->__get(index).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1112)							lastPosition = (int)0;
            						}
HXLINE(1114)						Float group1 = group->offsetY;
HXDLIN(1114)						rect->setTo(x,group1,lastPosition,(group->ascent + group->descent));
HXLINE(1115)						return true;
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1123)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1128___getCharIndexOnDifferentLine)
HXLINE(1130)		bool _hx_tmp;
HXDLIN(1130)		if ((charIndex >= (int)0)) {
HXLINE(1130)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(1130)			_hx_tmp = true;
            		}
HXDLIN(1130)		if (_hx_tmp) {
HXLINE(1130)			return (int)-1;
            		}
HXLINE(1131)		bool _hx_tmp1;
HXDLIN(1131)		if ((lineIndex >= (int)0)) {
HXLINE(1131)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1131)			_hx_tmp1 = true;
            		}
HXDLIN(1131)		if (_hx_tmp1) {
HXLINE(1131)			return (int)-1;
            		}
HXLINE(1133)		 ::Dynamic x = null();
HXDLIN(1133)		 ::Dynamic y = null();
HXLINE(1135)		{
HXLINE(1135)			int _g = (int)0;
HXDLIN(1135)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1135)			while((_g < _g1->get_length())){
HXLINE(1135)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1135)				_g = (_g + (int)1);
HXLINE(1137)				bool _hx_tmp2;
HXDLIN(1137)				if ((charIndex >= group->startIndex)) {
HXLINE(1137)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1137)					_hx_tmp2 = false;
            				}
HXDLIN(1137)				if (_hx_tmp2) {
HXLINE(1139)					x = group->offsetX;
HXLINE(1141)					{
HXLINE(1141)						int _g3 = (int)0;
HXDLIN(1141)						int _g2 = (charIndex - group->startIndex);
HXDLIN(1141)						while((_g3 < _g2)){
HXLINE(1141)							_g3 = (_g3 + (int)1);
HXDLIN(1141)							int i = (_g3 - (int)1);
HXLINE(1143)							Float x1;
HXDLIN(1143)							bool x2;
HXDLIN(1143)							if ((i >= (int)0)) {
HXLINE(1143)								x2 = (i < group->positions->length);
            							}
            							else {
HXLINE(1143)								x2 = false;
            							}
HXDLIN(1143)							if (x2) {
HXLINE(1143)								x1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1143)								x1 = (int)0;
            							}
HXDLIN(1143)							x = (x + x1);
            						}
            					}
HXLINE(1147)					if (hx::IsNotNull( y )) {
HXLINE(1147)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1151)				if ((group->lineIndex == lineIndex)) {
HXLINE(1153)					Float group1 = group->offsetY;
HXDLIN(1153)					y = (group1 + ((Float)group->height / (Float)(int)2));
HXLINE(1155)					{
HXLINE(1155)						int _g31 = (int)0;
HXDLIN(1155)						int _g21 = (this->get_scrollV() - (int)1);
HXDLIN(1155)						while((_g31 < _g21)){
HXLINE(1155)							_g31 = (_g31 + (int)1);
HXDLIN(1155)							int i1 = (_g31 - (int)1);
HXLINE(1157)							y = (y - this->_hx___textEngine->lineHeights->get(i1));
            						}
            					}
HXLINE(1161)					if (hx::IsNotNull( x )) {
HXLINE(1161)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1167)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1172___getCursor)
HXLINE(1174)		Float group = this->get_mouseX();
HXDLIN(1174)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1176)		bool _hx_tmp;
HXDLIN(1176)		if (hx::IsNotNull( group1 )) {
HXLINE(1176)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1176)			_hx_tmp = false;
            		}
HXDLIN(1176)		if (_hx_tmp) {
HXLINE(1178)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(1180)			if (this->_hx___textEngine->selectable) {
HXLINE(1182)				return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            			}
            		}
HXLINE(1186)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1191___getGroup)
HXLINE(1193)		this->_hx___updateLayout();
HXLINE(1195)		x = (x + this->get_scrollH());
HXLINE(1197)		{
HXLINE(1197)			int _g1 = (int)0;
HXDLIN(1197)			int _g = (this->get_scrollV() - (int)1);
HXDLIN(1197)			while((_g1 < _g)){
HXLINE(1197)				_g1 = (_g1 + (int)1);
HXDLIN(1197)				int i = (_g1 - (int)1);
HXLINE(1199)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1203)		bool _hx_tmp;
HXDLIN(1203)		if (!(precise)) {
HXLINE(1203)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1203)			_hx_tmp = false;
            		}
HXDLIN(1203)		if (_hx_tmp) {
HXLINE(1203)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1205)		bool firstGroup = true;
HXLINE(1206)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1206)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1208)		{
HXLINE(1208)			int _g11 = (int)0;
HXDLIN(1208)			int _g2 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1208)			while((_g11 < _g2)){
HXLINE(1208)				_g11 = (_g11 + (int)1);
HXDLIN(1208)				int i1 = (_g11 - (int)1);
HXLINE(1210)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1212)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - (int)1))) {
HXLINE(1214)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1218)					nextGroup = null();
            				}
HXLINE(1222)				if (firstGroup) {
HXLINE(1224)					if ((y < group->offsetY)) {
HXLINE(1224)						y = group->offsetY;
            					}
HXLINE(1225)					if ((x < group->offsetX)) {
HXLINE(1225)						x = group->offsetX;
            					}
HXLINE(1226)					firstGroup = false;
            				}
HXLINE(1230)				bool _hx_tmp1;
HXDLIN(1230)				bool _hx_tmp2;
HXDLIN(1230)				if ((y >= group->offsetY)) {
HXLINE(1230)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1230)					_hx_tmp2 = false;
            				}
HXDLIN(1230)				if (!(_hx_tmp2)) {
HXLINE(1230)					if (!(precise)) {
HXLINE(1230)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1230)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1230)					_hx_tmp1 = true;
            				}
HXDLIN(1230)				if (_hx_tmp1) {
HXLINE(1232)					bool _hx_tmp3;
HXDLIN(1232)					bool _hx_tmp4;
HXDLIN(1232)					if ((x >= group->offsetX)) {
HXLINE(1232)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1232)						_hx_tmp4 = false;
            					}
HXDLIN(1232)					if (!(_hx_tmp4)) {
HXLINE(1232)						if (!(precise)) {
HXLINE(1232)							if (hx::IsNotNull( nextGroup )) {
HXLINE(1232)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1232)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1232)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1232)						_hx_tmp3 = true;
            					}
HXDLIN(1232)					if (_hx_tmp3) {
HXLINE(1234)						return group;
            					}
            				}
            			}
            		}
HXLINE(1242)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1247___getPosition)
HXLINE(1249)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1251)		if (hx::IsNull( group )) {
HXLINE(1253)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1257)		Float advance = ((Float)0.0);
HXLINE(1259)		{
HXLINE(1259)			int _g1 = (int)0;
HXDLIN(1259)			int _g = group->positions->length;
HXDLIN(1259)			while((_g1 < _g)){
HXLINE(1259)				_g1 = (_g1 + (int)1);
HXDLIN(1259)				int i = (_g1 - (int)1);
HXLINE(1261)				Float advance1;
HXDLIN(1261)				bool advance2;
HXDLIN(1261)				if ((i >= (int)0)) {
HXLINE(1261)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1261)					advance2 = false;
            				}
HXDLIN(1261)				if (advance2) {
HXLINE(1261)					advance1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1261)					advance1 = (int)0;
            				}
HXDLIN(1261)				advance = (advance + advance1);
HXLINE(1263)				if ((x <= (group->offsetX + advance))) {
HXLINE(1265)					Float group1 = group->offsetX;
HXDLIN(1265)					Float _hx_tmp;
HXDLIN(1265)					bool _hx_tmp1;
HXDLIN(1265)					if ((i >= (int)0)) {
HXLINE(1265)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1265)						_hx_tmp1 = false;
            					}
HXDLIN(1265)					if (_hx_tmp1) {
HXLINE(1265)						_hx_tmp = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1265)						_hx_tmp = (int)0;
            					}
HXDLIN(1265)					Float _hx_tmp2 = (group1 + (advance - _hx_tmp));
HXDLIN(1265)					Float _hx_tmp3;
HXDLIN(1265)					bool _hx_tmp4;
HXDLIN(1265)					if ((i >= (int)0)) {
HXLINE(1265)						_hx_tmp4 = (i < group->positions->length);
            					}
            					else {
HXLINE(1265)						_hx_tmp4 = false;
            					}
HXDLIN(1265)					if (_hx_tmp4) {
HXLINE(1265)						_hx_tmp3 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1265)						_hx_tmp3 = (int)0;
            					}
HXDLIN(1265)					if ((x <= (_hx_tmp2 + ((Float)_hx_tmp3 / (Float)(int)2)))) {
HXLINE(1267)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1271)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1271)							return ((group->startIndex + i) + (int)1);
            						}
            						else {
HXLINE(1271)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1279)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1283___hitTest)
HXLINE(1285)		bool _hx_tmp;
HXDLIN(1285)		bool _hx_tmp1;
HXDLIN(1285)		if (!(!(hitObject->get_visible()))) {
HXLINE(1285)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1285)			_hx_tmp1 = true;
            		}
HXDLIN(1285)		if (!(_hx_tmp1)) {
HXLINE(1285)			if (interactiveOnly) {
HXLINE(1285)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1285)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1285)			_hx_tmp = true;
            		}
HXDLIN(1285)		if (_hx_tmp) {
HXLINE(1285)			return false;
            		}
HXLINE(1286)		bool _hx_tmp2;
HXDLIN(1286)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1286)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1286)			_hx_tmp2 = false;
            		}
HXDLIN(1286)		if (_hx_tmp2) {
HXLINE(1286)			return false;
            		}
HXLINE(1288)		this->_hx___getRenderTransform();
HXLINE(1289)		this->_hx___updateLayout();
HXLINE(1291)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1291)		Float norm = (_this->a * _this->d);
HXDLIN(1291)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1291)		Float px;
HXDLIN(1291)		if ((norm1 == (int)0)) {
HXLINE(1291)			px = -(_this->tx);
            		}
            		else {
HXLINE(1291)			Float _this1 = _this->c;
HXDLIN(1291)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1291)			Float _this2 = _this->d;
HXDLIN(1291)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1292)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1292)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1292)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1292)		Float py;
HXDLIN(1292)		if ((norm3 == (int)0)) {
HXLINE(1292)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1292)			Float _this4 = _this3->a;
HXDLIN(1292)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1292)			Float _this5 = _this3->b;
HXDLIN(1292)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1294)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1296)			if (hx::IsNotNull( stack )) {
HXLINE(1298)				stack->push(hitObject);
            			}
HXLINE(1302)			return true;
            		}
HXLINE(1306)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1311___hitTestMask)
HXLINE(1313)		this->_hx___getRenderTransform();
HXLINE(1314)		this->_hx___updateLayout();
HXLINE(1316)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1316)		Float norm = (_this->a * _this->d);
HXDLIN(1316)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1316)		Float px;
HXDLIN(1316)		if ((norm1 == (int)0)) {
HXLINE(1316)			px = -(_this->tx);
            		}
            		else {
HXLINE(1316)			Float _this1 = _this->c;
HXDLIN(1316)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1316)			Float _this2 = _this->d;
HXDLIN(1316)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1317)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1317)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1317)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1317)		Float py;
HXDLIN(1317)		if ((norm3 == (int)0)) {
HXLINE(1317)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1317)			Float _this4 = _this3->a;
HXDLIN(1317)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1317)			Float _this5 = _this3->b;
HXDLIN(1317)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1319)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1321)			return true;
            		}
HXLINE(1325)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1330___renderCairo)
HXLINE(1333)		this->_hx___updateCacheBitmap(renderer,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE(1335)		bool _hx_tmp;
HXDLIN(1335)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1335)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1335)			_hx_tmp = false;
            		}
HXDLIN(1335)		if (_hx_tmp) {
HXLINE(1337)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN(1337)			if (!(!(bitmap->_hx___renderable))) {
HXLINE(1337)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN(1337)				bool _hx_tmp1;
HXDLIN(1337)				bool _hx_tmp2;
HXDLIN(1337)				if ((alpha > (int)0)) {
HXLINE(1337)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE(1337)					_hx_tmp2 = false;
            				}
HXDLIN(1337)				if (_hx_tmp2) {
HXLINE(1337)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE(1337)					_hx_tmp1 = false;
            				}
HXDLIN(1337)				if (_hx_tmp1) {
HXLINE(1337)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN(1337)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN(1337)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN(1337)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN(1337)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN(1337)					if (hx::IsNotNull( surface )) {
HXLINE(1337)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN(1337)						int _hx_tmp3;
HXDLIN(1337)						bool _hx_tmp4;
HXDLIN(1337)						if (renderer->_hx___allowSmoothing) {
HXLINE(1337)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE(1337)							_hx_tmp4 = false;
            						}
HXDLIN(1337)						if (_hx_tmp4) {
HXLINE(1337)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE(1337)							_hx_tmp3 = (int)3;
            						}
HXDLIN(1337)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN(1337)						cairo->set_source(pattern);
HXDLIN(1337)						if ((alpha == (int)1)) {
HXLINE(1337)							cairo->paint();
            						}
            						else {
HXLINE(1337)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN(1337)					renderer->_hx___popMaskObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE(1341)			::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(1342)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1346)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1352___renderCanvas)
            	}


void TextField_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1429___renderDOM)
            	}


void TextField_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1473___renderDOMClear)
HXDLIN(1473)		::openfl::_internal::renderer::dom::DOMTextField_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void TextField_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1478___renderGL)
HXLINE(1480)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1482)		bool _hx_tmp;
HXDLIN(1482)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1482)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1482)			_hx_tmp = false;
            		}
HXDLIN(1482)		if (_hx_tmp) {
HXLINE(1484)			::openfl::_internal::renderer::opengl::GLBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE(1488)			::openfl::_internal::renderer::opengl::GLTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(1489)			bool _hx_tmp1;
HXDLIN(1489)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE(1489)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE(1489)				_hx_tmp1 = false;
            			}
HXDLIN(1489)			if (!(_hx_tmp1)) {
HXLINE(1489)				bool _hx_tmp2;
HXDLIN(1489)				if (!(!(this->_hx___renderable))) {
HXLINE(1489)					_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE(1489)					_hx_tmp2 = true;
            				}
HXDLIN(1489)				if (!(_hx_tmp2)) {
HXLINE(1489)					bool _hx_tmp3;
HXDLIN(1489)					bool _hx_tmp4;
HXDLIN(1489)					bool _hx_tmp5;
HXDLIN(1489)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(1489)						_hx_tmp5 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1489)						_hx_tmp5 = false;
            					}
HXDLIN(1489)					if (_hx_tmp5) {
HXLINE(1489)						_hx_tmp4 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE(1489)						_hx_tmp4 = false;
            					}
HXDLIN(1489)					if (_hx_tmp4) {
HXLINE(1489)						_hx_tmp3 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE(1489)						_hx_tmp3 = false;
            					}
HXDLIN(1489)					if (_hx_tmp3) {
HXLINE(1489)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN(1489)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(1489)						 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXDLIN(1489)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXDLIN(1489)						Float _hx_tmp6 = this->get_width();
HXDLIN(1489)						rect->setTo((int)0,(int)0,_hx_tmp6,this->get_height());
HXDLIN(1489)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN(1489)						int color = this->opaqueBackground;
HXDLIN(1489)						gl->clearColor(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN(1489)						gl->clear(gl->COLOR_BUFFER_BIT);
HXDLIN(1489)						renderer->_hx___popMaskRect();
HXDLIN(1489)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(1489)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1489)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1489)						::openfl::_internal::renderer::opengl::GLShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
            		}
HXLINE(1493)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1498___renderGLMask)
HXLINE(1500)		::openfl::_internal::renderer::opengl::GLTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(1502)		this->super::_hx___renderGLMask(renderer);
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,hx::Null< bool >  __o_restrict){
bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1507___replaceSelectedText)
HXLINE(1509)		if (hx::IsNull( value )) {
HXLINE(1509)			value = HX_("",00,00,00,00);
            		}
HXLINE(1510)		bool _hx_tmp;
HXDLIN(1510)		if ((value == HX_("",00,00,00,00))) {
HXLINE(1510)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(1510)			_hx_tmp = false;
            		}
HXDLIN(1510)		if (_hx_tmp) {
HXLINE(1510)			return;
            		}
HXLINE(1512)		int startIndex;
HXDLIN(1512)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(1512)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(1512)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(1513)		int endIndex;
HXDLIN(1513)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(1513)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(1513)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(1515)		bool _hx_tmp1;
HXDLIN(1515)		bool _hx_tmp2;
HXDLIN(1515)		if ((startIndex == endIndex)) {
HXLINE(1515)			_hx_tmp2 = (this->_hx___textEngine->maxChars > (int)0);
            		}
            		else {
HXLINE(1515)			_hx_tmp2 = false;
            		}
HXDLIN(1515)		if (_hx_tmp2) {
HXLINE(1515)			int _hx_tmp3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(1515)			_hx_tmp1 = (_hx_tmp3 == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(1515)			_hx_tmp1 = false;
            		}
HXDLIN(1515)		if (_hx_tmp1) {
HXLINE(1515)			return;
            		}
HXLINE(1517)		if ((startIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(1517)			startIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1518)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(1518)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1519)		if ((endIndex < startIndex)) {
HXLINE(1521)			int cache = endIndex;
HXLINE(1522)			endIndex = startIndex;
HXLINE(1523)			startIndex = cache;
            		}
HXLINE(1526)		if ((startIndex < (int)0)) {
HXLINE(1526)			startIndex = (int)0;
            		}
HXLINE(1528)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
HXLINE(1530)		int i = (startIndex + ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value));
HXLINE(1531)		if ((i > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(1531)			i = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1533)		this->setSelection(i,i);
HXLINE(1536)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1541___replaceText)
HXLINE(1543)		bool _hx_tmp;
HXDLIN(1543)		bool _hx_tmp1;
HXDLIN(1543)		bool _hx_tmp2;
HXDLIN(1543)		if ((endIndex >= beginIndex)) {
HXLINE(1543)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE(1543)			_hx_tmp2 = true;
            		}
HXDLIN(1543)		if (!(_hx_tmp2)) {
HXLINE(1543)			_hx_tmp1 = (endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(1543)			_hx_tmp1 = true;
            		}
HXDLIN(1543)		if (!(_hx_tmp1)) {
HXLINE(1543)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE(1543)			_hx_tmp = true;
            		}
HXDLIN(1543)		if (_hx_tmp) {
HXLINE(1543)			return;
            		}
HXLINE(1545)		if (restrict) {
HXLINE(1547)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(1549)			if ((this->_hx___textEngine->maxChars > (int)0)) {
HXLINE(1551)				int removeLength = (endIndex - beginIndex);
HXLINE(1552)				int maxLength = this->_hx___textEngine->maxChars;
HXDLIN(1552)				int maxLength1 = ((maxLength - ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text)) + removeLength);
HXLINE(1554)				if ((maxLength1 <= (int)0)) {
HXLINE(1556)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1558)					if ((maxLength1 < newText.length)) {
HXLINE(1560)						newText = newText.substr((int)0,maxLength1);
            					}
            				}
            			}
            		}
HXLINE(1568)		::String _hx_tmp3 = (::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,(int)0,beginIndex) + newText);
HXDLIN(1568)		this->_hx___updateText((_hx_tmp3 + ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,endIndex,null())));
HXLINE(1569)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE(1569)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1571)		int newText1 = newText.length;
HXDLIN(1571)		int offset = (newText1 - (endIndex - beginIndex));
HXLINE(1573)		int i = (int)0;
HXLINE(1574)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(1576)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(1578)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1580)			bool _hx_tmp4;
HXDLIN(1580)			if ((range->start <= beginIndex)) {
HXLINE(1580)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE(1580)				_hx_tmp4 = false;
            			}
HXDLIN(1580)			if (_hx_tmp4) {
HXLINE(1582)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN(1582)				range1->end = (range1->end + offset);
HXLINE(1583)				i = (i + (int)1);
            			}
            			else {
HXLINE(1585)				bool _hx_tmp5;
HXDLIN(1585)				if ((range->start >= beginIndex)) {
HXLINE(1585)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE(1585)					_hx_tmp5 = false;
            				}
HXDLIN(1585)				if (_hx_tmp5) {
HXLINE(1587)					if ((i > (int)0)) {
HXLINE(1589)						this->_hx___textEngine->textFormatRanges->splice(i,(int)1);
            					}
            					else {
HXLINE(1593)						range->start = (int)0;
HXLINE(1594)						range->end = (beginIndex + newText.length);
HXLINE(1595)						i = (i + (int)1);
            					}
HXLINE(1599)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE(1601)					bool _hx_tmp6;
HXDLIN(1601)					if ((range->start > beginIndex)) {
HXLINE(1601)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE(1601)						_hx_tmp6 = false;
            					}
HXDLIN(1601)					if (_hx_tmp6) {
HXLINE(1603)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN(1603)						range2->start = (range2->start + offset);
HXLINE(1604)						i = (i + (int)1);
            					}
            					else {
HXLINE(1608)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE(1614)		this->_hx___updateScrollH();
HXLINE(1616)		this->_hx___dirty = true;
HXLINE(1617)		this->_hx___layoutDirty = true;
HXLINE(1618)		if (!(this->_hx___renderDirty)) {
HXLINE(1618)			this->_hx___renderDirty = true;
HXDLIN(1618)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

 ::Dynamic TextField_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1625___shouldCacheHardware)
HXDLIN(1625)		if (hx::IsEq( value,true )) {
HXDLIN(1625)			return true;
            		}
            		else {
HXDLIN(1625)			return false;
            		}
HXDLIN(1625)		return false;
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1630___startCursorTimer)
HXLINE(1632)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(1633)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(1634)		this->_hx___dirty = true;
HXLINE(1635)		if (!(this->_hx___renderDirty)) {
HXLINE(1635)			this->_hx___renderDirty = true;
HXDLIN(1635)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1640___startTextInput)
HXLINE(1642)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(1644)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(1645)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(1649)		bool enableInput = true;
HXLINE(1651)		if (enableInput) {
HXLINE(1653)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1660___stopCursorTimer)
HXLINE(1662)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(1664)			this->_hx___cursorTimer->stop();
HXLINE(1665)			this->_hx___cursorTimer = null();
            		}
HXLINE(1669)		if (this->_hx___showCursor) {
HXLINE(1671)			this->_hx___showCursor = false;
HXLINE(1672)			this->_hx___dirty = true;
HXLINE(1673)			if (!(this->_hx___renderDirty)) {
HXLINE(1673)				this->_hx___renderDirty = true;
HXDLIN(1673)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1680___stopTextInput)
HXLINE(1682)		bool disableInput = true;
HXLINE(1684)		if (disableInput) {
HXLINE(1686)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

bool TextField_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1693___updateCacheBitmap)
HXLINE(1695)		bool _hx_tmp;
HXDLIN(1695)		bool _hx_tmp1;
HXDLIN(1695)		bool _hx_tmp2;
HXDLIN(1695)		if (hx::IsNull( this->_hx___filters )) {
HXLINE(1695)			_hx_tmp2 = hx::IsEq( renderer->_hx___type,::lime::graphics::RendererType_obj::OPENGL_dyn() );
            		}
            		else {
HXLINE(1695)			_hx_tmp2 = false;
            		}
HXDLIN(1695)		if (_hx_tmp2) {
HXLINE(1695)			_hx_tmp1 = hx::IsNull( this->_hx___cacheBitmap );
            		}
            		else {
HXLINE(1695)			_hx_tmp1 = false;
            		}
HXDLIN(1695)		if (_hx_tmp1) {
HXLINE(1695)			_hx_tmp = !(this->_hx___domRender);
            		}
            		else {
HXLINE(1695)			_hx_tmp = false;
            		}
HXDLIN(1695)		if (_hx_tmp) {
HXLINE(1695)			return false;
            		}
HXLINE(1697)		bool _hx_tmp3;
HXDLIN(1697)		if (!(force)) {
HXLINE(1697)			_hx_tmp3 = this->_hx___dirty;
            		}
            		else {
HXLINE(1697)			_hx_tmp3 = true;
            		}
HXDLIN(1697)		if (this->super::_hx___updateCacheBitmap(renderer,_hx_tmp3)) {
HXLINE(1699)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1701)				 ::openfl::geom::Matrix _hx_tmp4 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(1701)				_hx_tmp4->tx = (_hx_tmp4->tx - this->_hx___offsetX);
HXLINE(1702)				 ::openfl::geom::Matrix _hx_tmp5 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(1702)				_hx_tmp5->ty = (_hx_tmp5->ty - this->_hx___offsetY);
            			}
HXLINE(1706)			return true;
            		}
HXLINE(1710)		return false;
            	}


void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1717___updateLayout)
HXDLIN(1717)		if (this->_hx___layoutDirty) {
HXLINE(1719)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(1720)			Float cacheHeight = this->_hx___textEngine->height;
HXLINE(1722)			this->_hx___textEngine->update();
HXLINE(1724)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(1726)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(1728)					 ::Dynamic _g = this->_hx___textEngine->autoSize;
HXDLIN(1728)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1736)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1736)						Float _hx_tmp = _g1->get_x();
HXDLIN(1736)						_g1->set_x((_hx_tmp + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(1736)						goto _hx_goto_80;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1732)						 ::openfl::text::TextField _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1732)						Float _hx_tmp1 = _g2->get_x();
HXDLIN(1732)						_g2->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(1732)						goto _hx_goto_80;
            					}
            					/* default */{
            					}
            					_hx_goto_80:;
            				}
HXLINE(1746)				this->_hx___textEngine->getBounds();
            			}
HXLINE(1750)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1759___updateScrollH)
HXDLIN(1759)		bool _hx_tmp;
HXDLIN(1759)		if (!(this->get_multiline())) {
HXDLIN(1759)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(1759)			_hx_tmp = false;
            		}
HXDLIN(1759)		if (_hx_tmp) {
HXLINE(1761)			this->_hx___layoutDirty = true;
HXLINE(1762)			this->_hx___updateLayout();
HXLINE(1764)			Float offsetX = ((this->_hx___textEngine->textWidth - this->_hx___textEngine->width) + (int)4);
HXLINE(1766)			if ((offsetX > (int)0)) {
HXLINE(1771)				int _hx_tmp1 = this->_hx___caretIndex;
HXDLIN(1771)				if ((_hx_tmp1 >= ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text()))) {
HXLINE(1773)					this->set_scrollH(::Math_obj::ceil(offsetX));
            				}
            				else {
HXLINE(1777)					 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1778)					this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
HXLINE(1780)					Float caret1 = caret->x;
HXDLIN(1780)					if ((caret1 < this->get_scrollH())) {
HXLINE(1782)						this->set_scrollH(::Math_obj::floor((caret->x - (int)2)));
            					}
            					else {
HXLINE(1784)						Float caret2 = caret->x;
HXDLIN(1784)						int _hx_tmp2 = this->get_scrollH();
HXDLIN(1784)						if ((caret2 > (_hx_tmp2 + this->_hx___textEngine->width))) {
HXLINE(1786)							this->set_scrollH(::Math_obj::ceil(((caret->x - this->_hx___textEngine->width) - (int)2)));
            						}
            					}
HXLINE(1790)					::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            				}
            			}
            			else {
HXLINE(1796)				this->set_scrollH((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1805___updateText)
HXLINE(1817)		this->_hx___textEngine->set_text(value);
HXLINE(1818)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(1820)		int _hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(1820)		if ((_hx_tmp < this->_hx___caretIndex)) {
HXLINE(1822)			this->_hx___selectionIndex = (this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
HXLINE(1826)		if (!(this->_hx___displayAsPassword)) {
HXLINE(1828)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(1832)			int length = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE(1833)			::String mask = HX_("",00,00,00,00);
HXLINE(1835)			{
HXLINE(1835)				int _g1 = (int)0;
HXDLIN(1835)				int _g = length;
HXDLIN(1835)				while((_g1 < _g)){
HXLINE(1835)					_g1 = (_g1 + (int)1);
HXDLIN(1835)					int i = (_g1 - (int)1);
HXLINE(1837)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(1841)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1848___updateTransforms)
HXLINE(1850)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(1851)		{
HXLINE(1851)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1851)			Float px = this->_hx___offsetX;
HXDLIN(1851)			Float py = this->_hx___offsetY;
HXDLIN(1851)			Float _hx_tmp = (px * _this->a);
HXDLIN(1851)			_this->tx = ((_hx_tmp + (py * _this->c)) + _this->tx);
HXDLIN(1851)			Float _hx_tmp1 = (px * _this->b);
HXDLIN(1851)			_this->ty = ((_hx_tmp1 + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1865_get_antiAliasType)
HXDLIN(1865)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1870_set_antiAliasType)
HXLINE(1872)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(1878)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1885_get_autoSize)
HXDLIN(1885)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1890_set_autoSize)
HXLINE(1892)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(1894)			this->_hx___dirty = true;
HXLINE(1895)			this->_hx___layoutDirty = true;
HXLINE(1896)			if (!(this->_hx___renderDirty)) {
HXLINE(1896)				this->_hx___renderDirty = true;
HXDLIN(1896)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1900)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1907_get_background)
HXDLIN(1907)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1912_set_background)
HXLINE(1914)		if ((value != this->_hx___textEngine->background)) {
HXLINE(1916)			this->_hx___dirty = true;
HXLINE(1917)			if (!(this->_hx___renderDirty)) {
HXLINE(1917)				this->_hx___renderDirty = true;
HXDLIN(1917)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1921)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1928_get_backgroundColor)
HXDLIN(1928)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1933_set_backgroundColor)
HXLINE(1935)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(1937)			this->_hx___dirty = true;
HXLINE(1938)			if (!(this->_hx___renderDirty)) {
HXLINE(1938)				this->_hx___renderDirty = true;
HXDLIN(1938)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1942)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1949_get_border)
HXDLIN(1949)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1954_set_border)
HXLINE(1956)		if ((value != this->_hx___textEngine->border)) {
HXLINE(1958)			this->_hx___dirty = true;
HXLINE(1959)			if (!(this->_hx___renderDirty)) {
HXLINE(1959)				this->_hx___renderDirty = true;
HXDLIN(1959)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1963)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1970_get_borderColor)
HXDLIN(1970)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1975_set_borderColor)
HXLINE(1977)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(1979)			this->_hx___dirty = true;
HXLINE(1980)			if (!(this->_hx___renderDirty)) {
HXLINE(1980)				this->_hx___renderDirty = true;
HXDLIN(1980)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1984)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1989_get_bottomScrollV)
HXLINE(1991)		this->_hx___updateLayout();
HXLINE(1993)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

bool TextField_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1998_get_cacheAsBitmap)
HXLINE(2001)		bool _hx_tmp;
HXDLIN(2001)		bool _hx_tmp1;
HXDLIN(2001)		if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(2001)			_hx_tmp1 = (this->_hx___filters->length == (int)1);
            		}
            		else {
HXLINE(2001)			_hx_tmp1 = false;
            		}
HXDLIN(2001)		if (_hx_tmp1) {
HXLINE(2001)			_hx_tmp = ::Std_obj::is(this->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >(),hx::ClassOf< ::openfl::filters::GlowFilter >());
            		}
            		else {
HXLINE(2001)			_hx_tmp = false;
            		}
HXDLIN(2001)		if (_hx_tmp) {
HXLINE(2001)			return false;
            		}
HXLINE(2002)		return this->super::get_cacheAsBitmap();
            	}


int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2009_get_caretIndex)
HXDLIN(2009)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2016_get_defaultTextFormat)
HXDLIN(2016)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2021_set_defaultTextFormat)
HXLINE(2023)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2025)		this->_hx___layoutDirty = true;
HXLINE(2026)		this->_hx___dirty = true;
HXLINE(2027)		if (!(this->_hx___renderDirty)) {
HXLINE(2027)			this->_hx___renderDirty = true;
HXDLIN(2027)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2029)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2036_get_displayAsPassword)
HXDLIN(2036)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2041_set_displayAsPassword)
HXLINE(2043)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2045)			this->_hx___dirty = true;
HXLINE(2046)			this->_hx___layoutDirty = true;
HXLINE(2047)			if (!(this->_hx___renderDirty)) {
HXLINE(2047)				this->_hx___renderDirty = true;
HXDLIN(2047)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2049)			this->_hx___displayAsPassword = value;
HXLINE(2050)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2054)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2061_get_embedFonts)
HXDLIN(2061)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2075_set_embedFonts)
HXDLIN(2075)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2082_get_gridFitType)
HXDLIN(2082)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2096_set_gridFitType)
HXDLIN(2096)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2101_get_height)
HXLINE(2103)		this->_hx___updateLayout();
HXLINE(2104)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2104)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2109_set_height)
HXLINE(2111)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2113)			this->_hx___setTransformDirty();
HXLINE(2114)			this->_hx___dirty = true;
HXLINE(2115)			this->_hx___layoutDirty = true;
HXLINE(2116)			if (!(this->_hx___renderDirty)) {
HXLINE(2116)				this->_hx___renderDirty = true;
HXDLIN(2116)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2118)			this->_hx___textEngine->height = value;
            		}
HXLINE(2122)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2122)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2132_get_htmlText)
HXDLIN(2132)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2138_set_htmlText)
HXLINE(2140)		bool _hx_tmp;
HXDLIN(2140)		if (!(!(this->_hx___isHTML))) {
HXLINE(2140)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2140)			_hx_tmp = true;
            		}
HXDLIN(2140)		if (_hx_tmp) {
HXLINE(2142)			this->_hx___dirty = true;
HXLINE(2143)			this->_hx___layoutDirty = true;
HXLINE(2144)			if (!(this->_hx___renderDirty)) {
HXLINE(2144)				this->_hx___renderDirty = true;
HXDLIN(2144)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2148)		this->_hx___isHTML = true;
HXLINE(2154)		value = ::openfl::_internal::text::HTMLParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2188)		this->_hx___updateText(value);
HXLINE(2191)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2196_get_length)
HXLINE(2198)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(2200)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2204)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2211_get_maxChars)
HXDLIN(2211)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2216_set_maxChars)
HXLINE(2218)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2220)			this->_hx___textEngine->maxChars = value;
HXLINE(2222)			this->_hx___dirty = true;
HXLINE(2223)			this->_hx___layoutDirty = true;
HXLINE(2224)			if (!(this->_hx___renderDirty)) {
HXLINE(2224)				this->_hx___renderDirty = true;
HXDLIN(2224)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2228)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2233_get_maxScrollH)
HXLINE(2235)		this->_hx___updateLayout();
HXLINE(2237)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2242_get_maxScrollV)
HXLINE(2244)		this->_hx___updateLayout();
HXLINE(2246)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2253_get_mouseWheelEnabled)
HXDLIN(2253)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2260_set_mouseWheelEnabled)
HXDLIN(2260)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2267_get_multiline)
HXDLIN(2267)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2272_set_multiline)
HXLINE(2274)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2276)			this->_hx___dirty = true;
HXLINE(2277)			this->_hx___layoutDirty = true;
HXLINE(2278)			this->_hx___updateText(this->_hx___text);
HXLINE(2279)			this->_hx___updateScrollH();
HXLINE(2280)			if (!(this->_hx___renderDirty)) {
HXLINE(2280)				this->_hx___renderDirty = true;
HXDLIN(2280)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2284)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2289_get_numLines)
HXLINE(2291)		this->_hx___updateLayout();
HXLINE(2293)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2300_get_restrict)
HXDLIN(2300)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2305_set_restrict)
HXLINE(2307)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2309)			this->_hx___textEngine->set_restrict(value);
HXLINE(2310)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2314)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2321_get_scrollH)
HXDLIN(2321)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2326_set_scrollH)
HXLINE(2328)		this->_hx___updateLayout();
HXLINE(2330)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2330)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2331)		if ((value < (int)0)) {
HXLINE(2331)			value = (int)0;
            		}
HXLINE(2333)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2335)			this->_hx___dirty = true;
HXLINE(2336)			if (!(this->_hx___renderDirty)) {
HXLINE(2336)				this->_hx___renderDirty = true;
HXDLIN(2336)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2337)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2341)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2348_get_scrollV)
HXDLIN(2348)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2353_set_scrollV)
HXLINE(2355)		this->_hx___updateLayout();
HXLINE(2357)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2357)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2358)		if ((value < (int)1)) {
HXLINE(2358)			value = (int)1;
            		}
HXLINE(2360)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(2362)			this->_hx___dirty = true;
HXLINE(2363)			if (!(this->_hx___renderDirty)) {
HXLINE(2363)				this->_hx___renderDirty = true;
HXDLIN(2363)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2364)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2368)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2375_get_selectable)
HXDLIN(2375)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2380_set_selectable)
HXLINE(2382)		bool _hx_tmp;
HXDLIN(2382)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2382)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2382)			_hx_tmp = false;
            		}
HXDLIN(2382)		if (_hx_tmp) {
HXLINE(2384)			bool _hx_tmp1;
HXDLIN(2384)			if (hx::IsNotNull( this->stage )) {
HXLINE(2384)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2384)				_hx_tmp1 = false;
            			}
HXDLIN(2384)			if (_hx_tmp1) {
HXLINE(2386)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2388)				if (!(value)) {
HXLINE(2390)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2396)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2403_get_selectionBeginIndex)
HXDLIN(2403)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2410_get_selectionEndIndex)
HXDLIN(2410)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2417_get_sharpness)
HXDLIN(2417)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2422_set_sharpness)
HXLINE(2424)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2426)			this->_hx___dirty = true;
HXLINE(2427)			if (!(this->_hx___renderDirty)) {
HXLINE(2427)				this->_hx___renderDirty = true;
HXDLIN(2427)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2431)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2438_get_tabEnabled)
HXDLIN(2438)		if (hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2438)			return hx::IsEq( this->_hx___textEngine->type,(int)1 );
            		}
            		else {
HXDLIN(2438)			return this->_hx___tabEnabled;
            		}
HXDLIN(2438)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2445_get_text)
HXDLIN(2445)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2450_set_text)
HXLINE(2452)		bool _hx_tmp;
HXDLIN(2452)		if (!(this->_hx___isHTML)) {
HXLINE(2452)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2452)			_hx_tmp = true;
            		}
HXDLIN(2452)		if (_hx_tmp) {
HXLINE(2454)			this->_hx___dirty = true;
HXLINE(2455)			this->_hx___layoutDirty = true;
HXLINE(2456)			if (!(this->_hx___renderDirty)) {
HXLINE(2456)				this->_hx___renderDirty = true;
HXDLIN(2456)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2460)			return value;
            		}
HXLINE(2464)		if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(2466)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2466)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            		}
HXLINE(2470)		::String utfValue = value;
HXLINE(2471)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2472)		range->format = this->_hx___textFormat;
HXLINE(2473)		range->start = (int)0;
HXLINE(2474)		range->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(utfValue);
HXLINE(2476)		this->_hx___isHTML = false;
HXLINE(2478)		this->_hx___updateText(value);
HXLINE(2480)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2487_get_textColor)
HXDLIN(2487)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2492_set_textColor)
HXLINE(2494)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2496)			this->_hx___dirty = true;
HXLINE(2497)			if (!(this->_hx___renderDirty)) {
HXLINE(2497)				this->_hx___renderDirty = true;
HXDLIN(2497)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2501)		{
HXLINE(2501)			int _g = (int)0;
HXDLIN(2501)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2501)			while((_g < _g1->get_length())){
HXLINE(2501)				 ::openfl::_internal::text::TextFormatRange range = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(2501)				_g = (_g + (int)1);
HXLINE(2503)				range->format->color = value;
            			}
            		}
HXLINE(2507)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2511_get_textWidth)
HXLINE(2513)		this->_hx___updateLayout();
HXLINE(2514)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2519_get_textHeight)
HXLINE(2521)		this->_hx___updateLayout();
HXLINE(2522)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2529_get_type)
HXDLIN(2529)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2534_set_type)
HXLINE(2536)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(2538)			if (hx::IsEq( value,(int)1 )) {
HXLINE(2540)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(2542)				this->this_onFocusIn(null());
HXLINE(2543)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(2547)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(2549)				this->_hx___stopTextInput();
HXLINE(2550)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(2554)			this->_hx___dirty = true;
HXLINE(2555)			this->_hx___layoutDirty = true;
HXLINE(2556)			if (!(this->_hx___renderDirty)) {
HXLINE(2556)				this->_hx___renderDirty = true;
HXDLIN(2556)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2560)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2565_get_width)
HXLINE(2567)		this->_hx___updateLayout();
HXLINE(2568)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2568)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2573_set_width)
HXLINE(2575)		if ((value != this->_hx___textEngine->width)) {
HXLINE(2577)			this->_hx___setTransformDirty();
HXLINE(2578)			this->_hx___dirty = true;
HXLINE(2579)			this->_hx___layoutDirty = true;
HXLINE(2580)			if (!(this->_hx___renderDirty)) {
HXLINE(2580)				this->_hx___renderDirty = true;
HXDLIN(2580)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2582)			this->_hx___textEngine->width = value;
            		}
HXLINE(2586)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2586)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2593_get_wordWrap)
HXDLIN(2593)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2598_set_wordWrap)
HXLINE(2600)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(2602)			this->_hx___dirty = true;
HXLINE(2603)			this->_hx___layoutDirty = true;
HXLINE(2604)			if (!(this->_hx___renderDirty)) {
HXLINE(2604)				this->_hx___renderDirty = true;
HXDLIN(2604)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2608)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2615_get_x)
HXDLIN(2615)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2620_set_x)
HXLINE(2622)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(2622)			this->_hx___setTransformDirty();
            		}
HXLINE(2623)		return (this->_hx___transform->tx = (value - this->_hx___offsetX));
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2630_get_y)
HXDLIN(2630)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2635_set_y)
HXLINE(2637)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(2637)			this->_hx___setTransformDirty();
            		}
HXLINE(2638)		return (this->_hx___transform->ty = (value - this->_hx___offsetY));
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2650_stage_onMouseMove)
HXLINE(2652)		if (hx::IsNull( this->stage )) {
HXLINE(2652)			return;
            		}
HXLINE(2654)		bool _hx_tmp;
HXDLIN(2654)		if (this->_hx___textEngine->selectable) {
HXLINE(2654)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(2654)			_hx_tmp = false;
            		}
HXDLIN(2654)		if (_hx_tmp) {
HXLINE(2656)			this->_hx___updateLayout();
HXLINE(2658)			Float position = this->get_mouseX();
HXDLIN(2658)			Float position1 = (position + this->get_scrollH());
HXDLIN(2658)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(2660)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(2662)				this->_hx___caretIndex = position2;
HXLINE(2670)				{
HXLINE(2672)					this->_hx___dirty = true;
HXLINE(2673)					if (!(this->_hx___renderDirty)) {
HXLINE(2673)						this->_hx___renderDirty = true;
HXDLIN(2673)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2684_stage_onMouseUp)
HXLINE(2686)		if (hx::IsNull( this->stage )) {
HXLINE(2686)			return;
            		}
HXLINE(2688)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(2689)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(2691)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2693)			this->_hx___getWorldTransform();
HXLINE(2694)			this->_hx___updateLayout();
HXLINE(2696)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(2696)			Float px = this->get_x();
HXDLIN(2696)			Float py = this->get_y();
HXDLIN(2696)			Float norm = (_this->a * _this->d);
HXDLIN(2696)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2696)			Float px1;
HXDLIN(2696)			if ((norm1 == (int)0)) {
HXLINE(2696)				px1 = -(_this->tx);
            			}
            			else {
HXLINE(2696)				Float _this1 = _this->c;
HXDLIN(2696)				Float px2 = (_this1 * (_this->ty - py));
HXDLIN(2696)				Float _this2 = _this->d;
HXDLIN(2696)				px1 = (((Float)((Float)1.0) / (Float)norm1) * (px2 + (_this2 * (px - _this->tx))));
            			}
HXLINE(2697)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(2697)			Float px3 = this->get_x();
HXDLIN(2697)			Float py1 = this->get_y();
HXDLIN(2697)			Float norm2 = (_this3->a * _this3->d);
HXDLIN(2697)			Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(2697)			Float py2;
HXDLIN(2697)			if ((norm3 == (int)0)) {
HXLINE(2697)				py2 = -(_this3->ty);
            			}
            			else {
HXLINE(2697)				Float _this4 = _this3->a;
HXDLIN(2697)				Float py3 = (_this4 * (py1 - _this3->ty));
HXDLIN(2697)				Float _this5 = _this3->b;
HXDLIN(2697)				py2 = (((Float)((Float)1.0) / (Float)norm3) * (py3 + (_this5 * (_this3->tx - px3))));
            			}
HXLINE(2699)			Float upPos = this->get_mouseX();
HXDLIN(2699)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(2699)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(2700)			int leftPos;
HXLINE(2701)			int rightPos;
HXLINE(2703)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos2));
HXLINE(2704)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos2));
HXLINE(2706)			this->_hx___selectionIndex = leftPos;
HXLINE(2707)			this->_hx___caretIndex = rightPos;
HXLINE(2709)			if (this->_hx___inputEnabled) {
HXLINE(2711)				this->this_onFocusIn(null());
HXLINE(2713)				this->_hx___stopCursorTimer();
HXLINE(2714)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2731_this_onAddedToStage)
HXDLIN(2731)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2738_this_onFocusIn)
HXDLIN(2738)		bool _hx_tmp;
HXDLIN(2738)		bool _hx_tmp1;
HXDLIN(2738)		if (hx::IsEq( this->get_type(),(int)1 )) {
HXDLIN(2738)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(2738)			_hx_tmp1 = false;
            		}
HXDLIN(2738)		if (_hx_tmp1) {
HXDLIN(2738)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(2738)			_hx_tmp = false;
            		}
HXDLIN(2738)		if (_hx_tmp) {
HXLINE(2740)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2747_this_onFocusOut)
HXLINE(2749)		this->_hx___stopCursorTimer();
HXLINE(2753)		bool _hx_tmp;
HXDLIN(2753)		if (hx::IsNotNull( event->relatedObject )) {
HXLINE(2753)			_hx_tmp = !(::Std_obj::is(event->relatedObject,hx::ClassOf< ::openfl::text::TextField >()));
            		}
            		else {
HXLINE(2753)			_hx_tmp = true;
            		}
HXDLIN(2753)		if (_hx_tmp) {
HXLINE(2755)			this->_hx___stopTextInput();
            		}
            		else {
HXLINE(2759)			if (hx::IsNotNull( this->stage )) {
HXLINE(2761)				this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(2762)				this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
            			}
HXLINE(2766)			this->_hx___inputEnabled = false;
            		}
HXLINE(2770)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2772)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2773)			this->_hx___dirty = true;
HXLINE(2774)			if (!(this->_hx___renderDirty)) {
HXLINE(2774)				this->_hx___renderDirty = true;
HXDLIN(2774)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2783_this_onKeyDown)
HXDLIN(2783)		bool _hx_tmp;
HXDLIN(2783)		bool _hx_tmp1;
HXDLIN(2783)		bool _hx_tmp2;
HXDLIN(2783)		if (this->get_selectable()) {
HXDLIN(2783)			_hx_tmp2 = hx::IsNotEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(2783)			_hx_tmp2 = false;
            		}
HXDLIN(2783)		if (_hx_tmp2) {
HXDLIN(2783)			_hx_tmp1 = (event->keyCode == (int)67);
            		}
            		else {
HXDLIN(2783)			_hx_tmp1 = false;
            		}
HXDLIN(2783)		if (_hx_tmp1) {
HXDLIN(2783)			if (!(event->commandKey)) {
HXDLIN(2783)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(2783)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(2783)			_hx_tmp = false;
            		}
HXDLIN(2783)		if (_hx_tmp) {
HXLINE(2785)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2787)				::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2796_this_onMouseDown)
HXLINE(2798)		bool _hx_tmp;
HXDLIN(2798)		if (!(this->get_selectable())) {
HXLINE(2798)			_hx_tmp = hx::IsNotEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2798)			_hx_tmp = false;
            		}
HXDLIN(2798)		if (_hx_tmp) {
HXLINE(2798)			return;
            		}
HXLINE(2800)		this->_hx___updateLayout();
HXLINE(2802)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(2802)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(2802)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(2803)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2805)		{
HXLINE(2807)			this->_hx___dirty = true;
HXLINE(2808)			if (!(this->_hx___renderDirty)) {
HXLINE(2808)				this->_hx___renderDirty = true;
HXDLIN(2808)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2812)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(2813)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2820_window_onKeyDown)
HXDLIN(2820)		switch((int)(key)){
            			case (int)8: {
HXLINE(2834)				bool _hx_tmp;
HXDLIN(2834)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2834)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(2834)					_hx_tmp = false;
            				}
HXDLIN(2834)				if (_hx_tmp) {
HXLINE(2836)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(2840)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2842)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2843)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2845)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3051)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3053)					this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(3054)					this->_hx___selectionIndex = (int)0;
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3008)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3010)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3012)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3036)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3038)					this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3040)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3044)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3044)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1,(::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges) - (int)1))) )->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3020)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3022)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3024)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3026)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3027)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(2851)				bool _hx_tmp1;
HXDLIN(2851)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2851)					int _hx_tmp2 = this->_hx___caretIndex;
HXDLIN(2851)					_hx_tmp1 = (_hx_tmp2 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            				}
            				else {
HXLINE(2851)					_hx_tmp1 = false;
            				}
HXDLIN(2851)				if (_hx_tmp1) {
HXLINE(2853)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(2857)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2859)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2860)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2862)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2996)				this->_hx___caretBeginningOfLine();
HXLINE(2997)				this->_hx___stopCursorTimer();
HXLINE(2998)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3002)				this->_hx___caretEndOfLine();
HXLINE(3003)				this->_hx___stopCursorTimer();
HXLINE(3004)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2904)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2906)					this->_hx___caretEndOfLine();
HXLINE(2908)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2910)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2914)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2916)						this->_hx___caretNextCharacter();
            					}
            					else {
HXLINE(2920)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2922)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(2926)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2930)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2934)				this->_hx___updateScrollH();
HXLINE(2935)				this->_hx___stopCursorTimer();
HXLINE(2936)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2868)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2870)					this->_hx___caretBeginningOfLine();
HXLINE(2872)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2874)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2878)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2880)						this->_hx___caretPreviousCharacter();
            					}
            					else {
HXLINE(2884)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2886)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(2890)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2894)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2898)				this->_hx___updateScrollH();
HXLINE(2899)				this->_hx___stopCursorTimer();
HXLINE(2900)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2940)				if (!(this->_hx___textEngine->multiline)) {
HXLINE(2940)					return;
            				}
HXLINE(2942)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2944)					this->_hx___caretNextLine(null(),null());
            				}
            				else {
HXLINE(2948)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2950)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(2954)						int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2955)						this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2959)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2963)				this->_hx___stopCursorTimer();
HXLINE(2964)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2968)				if (!(this->_hx___textEngine->multiline)) {
HXLINE(2968)					return;
            				}
HXLINE(2970)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2972)					this->_hx___caretPreviousLine(null(),null());
            				}
            				else {
HXLINE(2976)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2978)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(2982)						int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2983)						this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2987)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2991)				this->_hx___stopCursorTimer();
HXLINE(2992)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(2824)				if (this->_hx___textEngine->multiline) {
HXLINE(2826)					this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(2828)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3065_window_onTextInput)
HXLINE(3067)		this->_hx___replaceSelectedText(value,true);
HXLINE(3070)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__domRender","\x58","\x38","\xba","\x4f"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__allowMouseFocus","\x3c","\x92","\x71","\x07"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__disableInput","\x22","\x64","\x62","\x1d"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__enableInput","\x67","\x4b","\x65","\xd1"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getAdvance","\xac","\x09","\x01","\x77"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharBoundaries","\x54","\xae","\x91","\x3e"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getGroup","\xe9","\x35","\x04","\x9d"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__replaceSelectedText","\xdc","\x1f","\x28","\x29"),
	HX_HCSTRING("__replaceText","\xe1","\xab","\x0d","\xaa"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateScrollH","\x72","\xd1","\xf8","\x83"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_tabEnabled","\xf5","\x7e","\xfe","\xb5"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onKeyDown","\xe1","\x85","\xbf","\x37"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_71_boot)
HXDLIN(  71)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
