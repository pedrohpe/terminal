// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLContextType
#include <lime/graphics/opengl/GLContextType.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLContext3D
#include <openfl/_internal/stage3D/opengl/GLContext3D.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_66_create,"openfl._internal.stage3D.opengl.GLContext3D","create",0x121cd5bf,"openfl._internal.stage3D.opengl.GLContext3D.create","openfl/_internal/stage3D/opengl/GLContext3D.hx",66,0x6963e5f1)
static const Float _hx_array_data_da5a374b_2[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_202_clear,"openfl._internal.stage3D.opengl.GLContext3D","clear",0x11ed4c2a,"openfl._internal.stage3D.opengl.GLContext3D.clear","openfl/_internal/stage3D/opengl/GLContext3D.hx",202,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_242_configureBackBuffer,"openfl._internal.stage3D.opengl.GLContext3D","configureBackBuffer",0xadbd8f6a,"openfl._internal.stage3D.opengl.GLContext3D.configureBackBuffer","openfl/_internal/stage3D/opengl/GLContext3D.hx",242,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_262_dispose,"openfl._internal.stage3D.opengl.GLContext3D","dispose",0x70fffc7c,"openfl._internal.stage3D.opengl.GLContext3D.dispose","openfl/_internal/stage3D/opengl/GLContext3D.hx",262,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_269_drawToBitmapData,"openfl._internal.stage3D.opengl.GLContext3D","drawToBitmapData",0x3884f5bb,"openfl._internal.stage3D.opengl.GLContext3D.drawToBitmapData","openfl/_internal/stage3D/opengl/GLContext3D.hx",269,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_287_drawTriangles,"openfl._internal.stage3D.opengl.GLContext3D","drawTriangles",0x127183a4,"openfl._internal.stage3D.opengl.GLContext3D.drawTriangles","openfl/_internal/stage3D/opengl/GLContext3D.hx",287,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_319_present,"openfl._internal.stage3D.opengl.GLContext3D","present",0xef8fb6d8,"openfl._internal.stage3D.opengl.GLContext3D.present","openfl/_internal/stage3D/opengl/GLContext3D.hx",319,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_335_setBlendFactors,"openfl._internal.stage3D.opengl.GLContext3D","setBlendFactors",0x2e5b6c12,"openfl._internal.stage3D.opengl.GLContext3D.setBlendFactors","openfl/_internal/stage3D/opengl/GLContext3D.hx",335,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_353_setColorMask,"openfl._internal.stage3D.opengl.GLContext3D","setColorMask",0x4bc0eef0,"openfl._internal.stage3D.opengl.GLContext3D.setColorMask","openfl/_internal/stage3D/opengl/GLContext3D.hx",353,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_363_setCulling,"openfl._internal.stage3D.opengl.GLContext3D","setCulling",0x21e69331,"openfl._internal.stage3D.opengl.GLContext3D.setCulling","openfl/_internal/stage3D/opengl/GLContext3D.hx",363,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_415_setDepthTest,"openfl._internal.stage3D.opengl.GLContext3D","setDepthTest",0xcb7a45f6,"openfl._internal.stage3D.opengl.GLContext3D.setDepthTest","openfl/_internal/stage3D/opengl/GLContext3D.hx",415,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_466_setEnableErrorChecking,"openfl._internal.stage3D.opengl.GLContext3D","setEnableErrorChecking",0x89de8ac0,"openfl._internal.stage3D.opengl.GLContext3D.setEnableErrorChecking","openfl/_internal/stage3D/opengl/GLContext3D.hx",466,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_473_setProgram,"openfl._internal.stage3D.opengl.GLContext3D","setProgram",0xc257fb45,"openfl._internal.stage3D.opengl.GLContext3D.setProgram","openfl/_internal/stage3D/opengl/GLContext3D.hx",473,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_493_setProgramConstantsFromByteArray,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromByteArray",0x79e535bd,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromByteArray","openfl/_internal/stage3D/opengl/GLContext3D.hx",493,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_526_setProgramConstantsFromMatrix,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromMatrix",0xa484da75,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromMatrix","openfl/_internal/stage3D/opengl/GLContext3D.hx",526,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_588_setProgramConstantsFromVector,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromVector",0x801a54f7,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromVector","openfl/_internal/stage3D/opengl/GLContext3D.hx",588,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_621_setRenderToBackBuffer,"openfl._internal.stage3D.opengl.GLContext3D","setRenderToBackBuffer",0x59e92937,"openfl._internal.stage3D.opengl.GLContext3D.setRenderToBackBuffer","openfl/_internal/stage3D/opengl/GLContext3D.hx",621,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_649_setRenderToTexture,"openfl._internal.stage3D.opengl.GLContext3D","setRenderToTexture",0x13ac342b,"openfl._internal.stage3D.opengl.GLContext3D.setRenderToTexture","openfl/_internal/stage3D/opengl/GLContext3D.hx",649,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_794_setSamplerStateAt,"openfl._internal.stage3D.opengl.GLContext3D","setSamplerStateAt",0xbd4f029b,"openfl._internal.stage3D.opengl.GLContext3D.setSamplerStateAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",794,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_917_setScissorRectangle,"openfl._internal.stage3D.opengl.GLContext3D","setScissorRectangle",0xacd85792,"openfl._internal.stage3D.opengl.GLContext3D.setScissorRectangle","openfl/_internal/stage3D/opengl/GLContext3D.hx",917,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_929_setStencilActions,"openfl._internal.stage3D.opengl.GLContext3D","setStencilActions",0x3da4bec0,"openfl._internal.stage3D.opengl.GLContext3D.setStencilActions","openfl/_internal/stage3D/opengl/GLContext3D.hx",929,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_942_setStencilReferenceValue,"openfl._internal.stage3D.opengl.GLContext3D","setStencilReferenceValue",0xa69b3b43,"openfl._internal.stage3D.opengl.GLContext3D.setStencilReferenceValue","openfl/_internal/stage3D/opengl/GLContext3D.hx",942,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_959_setTextureAt,"openfl._internal.stage3D.opengl.GLContext3D","setTextureAt",0xd74651af,"openfl._internal.stage3D.opengl.GLContext3D.setTextureAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",959,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_969_setVertexBufferAt,"openfl._internal.stage3D.opengl.GLContext3D","setVertexBufferAt",0xd8f72af6,"openfl._internal.stage3D.opengl.GLContext3D.setVertexBufferAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",969,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1030___flushSamplerState,"openfl._internal.stage3D.opengl.GLContext3D","__flushSamplerState",0xf6f5250a,"openfl._internal.stage3D.opengl.GLContext3D.__flushSamplerState","openfl/_internal/stage3D/opengl/GLContext3D.hx",1030,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1105___getGLCompareMode,"openfl._internal.stage3D.opengl.GLContext3D","__getGLCompareMode",0xda71b490,"openfl._internal.stage3D.opengl.GLContext3D.__getGLCompareMode","openfl/_internal/stage3D/opengl/GLContext3D.hx",1105,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1124___getGLTriangleFace,"openfl._internal.stage3D.opengl.GLContext3D","__getGLTriangleFace",0x6d33e89d,"openfl._internal.stage3D.opengl.GLContext3D.__getGLTriangleFace","openfl/_internal/stage3D/opengl/GLContext3D.hx",1124,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1139___getGLStencilAction,"openfl._internal.stage3D.opengl.GLContext3D","__getGLStencilAction",0xdaa342ba,"openfl._internal.stage3D.opengl.GLContext3D.__getGLStencilAction","openfl/_internal/stage3D/opengl/GLContext3D.hx",1139,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1158___hasGLExtension,"openfl._internal.stage3D.opengl.GLContext3D","__hasGLExtension",0xe0149f23,"openfl._internal.stage3D.opengl.GLContext3D.__hasGLExtension","openfl/_internal/stage3D/opengl/GLContext3D.hx",1158,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1163___setViewport,"openfl._internal.stage3D.opengl.GLContext3D","__setViewport",0x498796a5,"openfl._internal.stage3D.opengl.GLContext3D.__setViewport","openfl/_internal/stage3D/opengl/GLContext3D.hx",1163,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1263___updateBackbufferViewportTEMP,"openfl._internal.stage3D.opengl.GLContext3D","__updateBackbufferViewportTEMP",0x3ee4e74d,"openfl._internal.stage3D.opengl.GLContext3D.__updateBackbufferViewportTEMP","openfl/_internal/stage3D/opengl/GLContext3D.hx",1263,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1274___updateBackbufferViewport,"openfl._internal.stage3D.opengl.GLContext3D","__updateBackbufferViewport",0x4fe78bb9,"openfl._internal.stage3D.opengl.GLContext3D.__updateBackbufferViewport","openfl/_internal/stage3D/opengl/GLContext3D.hx",1274,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1298___updateBlendFactorsTEMP,"openfl._internal.stage3D.opengl.GLContext3D","__updateBlendFactorsTEMP",0x3ae883d3,"openfl._internal.stage3D.opengl.GLContext3D.__updateBlendFactorsTEMP","openfl/_internal/stage3D/opengl/GLContext3D.hx",1298,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1309___updateBlendFactors,"openfl._internal.stage3D.opengl.GLContext3D","__updateBlendFactors",0xfb74ed3f,"openfl._internal.stage3D.opengl.GLContext3D.__updateBlendFactors","openfl/_internal/stage3D/opengl/GLContext3D.hx",1309,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1357___updateDepthAndStencilState,"openfl._internal.stage3D.opengl.GLContext3D","__updateDepthAndStencilState",0x73a676f5,"openfl._internal.stage3D.opengl.GLContext3D.__updateDepthAndStencilState","openfl/_internal/stage3D/opengl/GLContext3D.hx",1357,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1380___updateScissorRectangle,"openfl._internal.stage3D.opengl.GLContext3D","__updateScissorRectangle",0x144e733f,"openfl._internal.stage3D.opengl.GLContext3D.__updateScissorRectangle","openfl/_internal/stage3D/opengl/GLContext3D.hx",1380,0x6963e5f1)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLContext3D_obj::__construct() { }

Dynamic GLContext3D_obj::__CreateEmpty() { return new GLContext3D_obj; }

void *GLContext3D_obj::_hx_vtable = 0;

Dynamic GLContext3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLContext3D_obj > _hx_result = new GLContext3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLContext3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41bc9ce9;
}

 ::openfl::display3D::Context3D GLContext3D_obj::context;

 ::lime::_backend::native::NativeGLRenderContext GLContext3D_obj::gl;

void GLContext3D_obj::create( ::openfl::display3D::Context3D context){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_66_create)
HXLINE(  68)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE(  69)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE(  71)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN(  71)		context->_hx___vertexConstants = this1;
HXLINE(  72)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN(  72)		context->_hx___fragmentConstants = this2;
HXLINE(  74)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_da5a374b_2,4);
HXDLIN(  74)		 ::lime::utils::ArrayBufferView this3;
HXDLIN(  74)		if (hx::IsNotNull( array )) {
HXLINE(  74)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  74)			_this->byteOffset = (int)0;
HXDLIN(  74)			_this->length = array->get_length();
HXDLIN(  74)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  74)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  74)			_this->buffer = this4;
HXDLIN(  74)			_this->copyFromArray(array,null());
HXDLIN(  74)			this3 = _this;
            		}
            		else {
HXLINE(  74)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  74)		context->_hx___positionScale = this3;
HXLINE(  75)		context->_hx___samplerDirty = (int)0;
HXLINE(  76)		bool fixed = null();
HXDLIN(  76)		context->_hx___samplerTextures =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null(),true);
HXLINE(  77)		context->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  79)		{
HXLINE(  79)			int _g = (int)0;
HXDLIN(  79)			while((_g < (int)8)){
HXLINE(  79)				_g = (_g + (int)1);
HXDLIN(  79)				int i = (_g - (int)1);
HXLINE(  81)				::Array< ::Dynamic> context1 = context->_hx___samplerStates;
HXDLIN(  81)				context1[i] =  ::openfl::_internal::stage3D::SamplerState_obj::__alloc( HX_CTX ,gl->LINEAR,gl->LINEAR,gl->CLAMP_TO_EDGE,gl->CLAMP_TO_EDGE,null(),null(),null(),null(),null(),null());
            			}
            		}
HXLINE(  88)		context->maxBackBufferHeight = (context->maxBackBufferWidth = (int)16384);
HXLINE(  91)		context->_hx___backBufferAntiAlias = (int)0;
HXLINE(  92)		context->_hx___backBufferEnableDepthAndStencil = true;
HXLINE(  93)		context->_hx___backBufferWantsBestResolution = false;
HXLINE(  95)		context->_hx___frameCount = (int)0;
HXLINE(  96)		context->_hx___rttDepthAndStencil = false;
HXLINE(  97)		context->_hx___samplerDirty = (int)0;
HXLINE(  98)		context->_hx___stencilCompareMode = (int)0;
HXLINE(  99)		context->_hx___stencilRef = (int)0;
HXLINE( 100)		context->_hx___stencilReadMask = (int)255;
HXLINE( 102)		 ::Dynamic anisoExtension = gl->getExtension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXLINE( 116)		bool _hx_tmp;
HXDLIN( 116)		if (hx::IsEq( gl->type,::lime::graphics::opengl::GLContextType_obj::GLES_dyn() )) {
HXLINE( 116)			_hx_tmp = (gl->version >= (int)3);
            		}
            		else {
HXLINE( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			context->_hx___supportsPackedDepthStencil = true;
HXLINE( 119)			::openfl::display3D::Context3D_obj::DEPTH_STENCIL = gl->DEPTH24_STENCIL8;
            		}
            		else {
HXLINE( 123)			 ::Dynamic stencilExtension = gl->getExtension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXLINE( 125)			if (hx::IsNotNull( stencilExtension )) {
HXLINE( 127)				context->_hx___supportsPackedDepthStencil = true;
HXLINE( 128)				::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 132)				stencilExtension = gl->getExtension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXLINE( 134)				if (hx::IsNotNull( stencilExtension )) {
HXLINE( 136)					context->_hx___supportsPackedDepthStencil = true;
HXLINE( 137)					::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 147)		context->_hx___supportsAnisotropicFiltering = hx::IsNotNull( anisoExtension );
HXLINE( 149)		if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 151)			::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT = ( (int)(anisoExtension->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),hx::paccDynamic)) );
HXLINE( 153)			int maxAnisotropy = ( (int)(gl->getParameter(( (int)(anisoExtension->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),hx::paccDynamic)) ))) );
HXLINE( 154)			context->_hx___maxAnisotropyTexture2D = maxAnisotropy;
HXLINE( 155)			context->_hx___maxAnisotropyTexture2D = maxAnisotropy;
            		}
HXLINE( 167)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 169)		::String vendor = ( (::String)(gl->getParameter(gl->VENDOR)) );
HXLINE( 170)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 172)		::String version = ( (::String)(gl->getParameter(gl->VERSION)) );
HXLINE( 173)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 175)		::String renderer1 = ( (::String)(gl->getParameter(gl->RENDERER)) );
HXLINE( 176)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 178)		::String glslVersion = ( (::String)(gl->getParameter(gl->SHADING_LANGUAGE_VERSION)) );
HXLINE( 179)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 181)		context->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer1) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,create,(void))

void GLContext3D_obj::clear( ::openfl::display3D::Context3D context,hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_202_clear)
HXLINE( 204)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 205)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 206)		int clearMask = (int)0;
HXLINE( 208)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 210)			clearMask = ((int)clearMask | (int)gl->COLOR_BUFFER_BIT);
HXLINE( 212)			gl->clearColor(red,green,blue,alpha);
HXLINE( 213)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 217)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 219)			clearMask = ((int)clearMask | (int)gl->DEPTH_BUFFER_BIT);
HXLINE( 221)			gl->depthMask(true);
HXLINE( 222)			gl->clearDepthf(depth);
HXLINE( 223)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 227)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 229)			clearMask = ((int)clearMask | (int)gl->STENCIL_BUFFER_BIT);
HXLINE( 231)			gl->clearStencil(stencil);
HXLINE( 232)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 236)		gl->clear(clearMask);
HXLINE( 237)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(GLContext3D_obj,clear,(void))

void GLContext3D_obj::configureBackBuffer( ::openfl::display3D::Context3D context,int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_242_configureBackBuffer)
HXLINE( 244)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 245)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 246)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 248)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
HXLINE( 250)		context->backBufferWidth = width;
HXLINE( 251)		context->backBufferHeight = height;
HXLINE( 253)		context->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 254)		context->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 255)		context->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 257)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(GLContext3D_obj,configureBackBuffer,(void))

void GLContext3D_obj::dispose( ::openfl::display3D::Context3D context,hx::Null< bool >  __o_recreate){
bool recreate = __o_recreate.Default(true);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_262_dispose)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,dispose,(void))

void GLContext3D_obj::drawToBitmapData( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData destination){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_269_drawToBitmapData)
HXLINE( 271)		 ::lime::ui::Window window = context->_hx___stage3D->_hx___stage->window;
HXLINE( 273)		if (hx::IsNotNull( window )) {
HXLINE( 275)			 ::lime::graphics::Image image = window->renderer->readPixels(null());
HXLINE( 277)			int offsetX;
HXDLIN( 277)			if ((context->_hx___stage3D->get_x() > (int)0)) {
HXLINE( 277)				offsetX = ::Std_obj::_hx_int(-(context->_hx___stage3D->get_x()));
            			}
            			else {
HXLINE( 277)				offsetX = (int)0;
            			}
HXLINE( 278)			int offsetY;
HXDLIN( 278)			if ((context->_hx___stage3D->get_y() < (int)0)) {
HXLINE( 278)				offsetY = ::Std_obj::_hx_int(-(context->_hx___stage3D->get_y()));
            			}
            			else {
HXLINE( 278)				offsetY = (int)0;
            			}
HXLINE( 280)			 ::lime::graphics::Image destination1 = destination->image;
HXDLIN( 280)			 ::lime::math::Rectangle _hx_tmp =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,context->backBufferWidth,context->backBufferHeight);
HXDLIN( 280)			destination1->copyPixels(image,_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,offsetX,offsetY),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,drawToBitmapData,(void))

void GLContext3D_obj::drawTriangles( ::openfl::display3D::Context3D context, ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_287_drawTriangles)
HXLINE( 289)		if (hx::IsNull( context->_hx___program )) {
HXLINE( 291)			return;
            		}
HXLINE( 295)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 296)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 297)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 299)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___flushSamplerState();
HXLINE( 300)		context->_hx___program->_hx___flush();
HXLINE( 302)		int count;
HXDLIN( 302)		if ((numTriangles == (int)-1)) {
HXLINE( 302)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 302)			count = (numTriangles * (int)3);
            		}
HXLINE( 304)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->bindBuffer(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ELEMENT_ARRAY_BUFFER,indexBuffer->_hx___id);
HXLINE( 305)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 307)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 307)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TRIANGLES;
HXDLIN( 307)		int indexBuffer1 = indexBuffer->_hx___elementType;
HXDLIN( 307)		_hx_tmp->drawElements(_hx_tmp1,count,indexBuffer1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(firstIndex));
HXLINE( 308)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,drawTriangles,(void))

void GLContext3D_obj::present( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_319_present)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,present,(void))

void GLContext3D_obj::setBlendFactors( ::openfl::display3D::Context3D context, ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_335_setBlendFactors)
HXLINE( 337)		bool updateSrc = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 338)		bool updateDest = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 340)		bool _hx_tmp;
HXDLIN( 340)		if (!(updateSrc)) {
HXLINE( 340)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 340)			_hx_tmp = true;
            		}
HXDLIN( 340)		if (_hx_tmp) {
HXLINE( 342)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 343)			 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 344)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 346)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBlendFactors();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setBlendFactors,(void))

void GLContext3D_obj::setColorMask( ::openfl::display3D::Context3D context,bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_353_setColorMask)
HXLINE( 355)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 356)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 358)		gl->colorMask(red,green,blue,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setColorMask,(void))

 ::openfl::errors::Error GLContext3D_obj::setCulling( ::openfl::display3D::Context3D context, ::Dynamic triangleFaceToCull){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_363_setCulling)
HXLINE( 365)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 366)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 368)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull)) {
HXLINE( 381)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 389)				gl->enable(gl->CULL_FACE);
HXLINE( 390)				gl->cullFace(gl->FRONT);
HXLINE( 387)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 394)				gl->enable(gl->CULL_FACE);
HXLINE( 395)				gl->cullFace(gl->BACK);
HXLINE( 392)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 399)				gl->enable(gl->CULL_FACE);
HXLINE( 400)				gl->cullFace(gl->FRONT_AND_BACK);
HXLINE( 397)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 385)				gl->disable(gl->CULL_FACE);
HXDLIN( 385)				goto _hx_goto_11;
            			}
            			/* default */{
HXLINE( 404)				return  ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null());
            			}
            			_hx_goto_11:;
            		}
HXLINE( 410)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setCulling,return )

void GLContext3D_obj::setDepthTest( ::openfl::display3D::Context3D context,bool depthMask, ::Dynamic passCompareMode){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_415_setDepthTest)
HXLINE( 417)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 418)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 419)		bool depthTestEnabled = context->_hx___backBufferEnableDepthAndStencil;
HXLINE( 421)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled)) {
HXLINE( 423)			if (depthTestEnabled) {
HXLINE( 425)				gl->enable(gl->DEPTH_TEST);
            			}
            			else {
HXLINE( 429)				gl->disable(gl->DEPTH_TEST);
            			}
            		}
HXLINE( 435)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask)) {
HXLINE( 437)			gl->depthMask(depthMask);
            		}
HXLINE( 441)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode)) {
HXLINE( 443)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 445)				gl->depthFunc(gl->ALWAYS);
HXDLIN( 445)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 446)				gl->depthFunc(gl->EQUAL);
HXDLIN( 446)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 447)				gl->depthFunc(gl->GREATER);
HXDLIN( 447)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 448)				gl->depthFunc(gl->GEQUAL);
HXDLIN( 448)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 449)				gl->depthFunc(gl->LESS);
HXDLIN( 449)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 450)				gl->depthFunc(gl->LEQUAL);
HXDLIN( 450)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 451)				gl->depthFunc(gl->NEVER);
HXDLIN( 451)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 452)				gl->depthFunc(gl->NOTEQUAL);
HXDLIN( 452)				goto _hx_goto_13;
            			}
            			/* default */{
HXLINE( 455)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_13:;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setDepthTest,(void))

void GLContext3D_obj::setEnableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_466_setEnableErrorChecking)
HXDLIN( 466)		::openfl::_internal::stage3D::GLUtils_obj::debug = value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,setEnableErrorChecking,(void))

void GLContext3D_obj::setProgram( ::openfl::display3D::Context3D context, ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_473_setProgram)
HXDLIN( 473)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program)) {
HXLINE( 475)			program->_hx___use();
HXLINE( 476)			program->_hx___setPositionScale(context->_hx___positionScale);
HXLINE( 478)			context->_hx___program = program;
HXLINE( 480)			 ::openfl::display3D::Context3D context1 = context;
HXDLIN( 480)			context1->_hx___samplerDirty = ((int)context1->_hx___samplerDirty | (int)context->_hx___program->_hx___samplerUsageMask);
HXLINE( 482)			{
HXLINE( 482)				int _g = (int)0;
HXDLIN( 482)				while((_g < (int)8)){
HXLINE( 482)					_g = (_g + (int)1);
HXDLIN( 482)					int i = (_g - (int)1);
HXLINE( 484)					 ::openfl::_internal::stage3D::SamplerState context2 = context->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 484)					context2->copyFrom(context->_hx___program->_hx___getSamplerState(i));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setProgram,(void))

void GLContext3D_obj::setProgramConstantsFromByteArray( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_493_setProgramConstantsFromByteArray)
HXLINE( 495)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 496)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 498)		if ((numRegisters == (int)-1)) {
HXLINE( 500)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 504)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 505)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 505)		if (isVertex) {
HXLINE( 505)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 505)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 507)		 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 507)		 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 507)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 507)		if (hx::IsNotNull( bytes )) {
HXLINE( 507)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 507)			int in_byteOffset = (int)0;
HXDLIN( 507)			if ((in_byteOffset < (int)0)) {
HXLINE( 507)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 507)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 507)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 507)			int bufferByteLength = bytes->length;
HXDLIN( 507)			int elementSize = _this->bytesPerElement;
HXDLIN( 507)			int newByteLength = bufferByteLength;
HXDLIN( 507)			if (hx::IsNull( len )) {
HXLINE( 507)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 507)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 507)				if ((newByteLength < (int)0)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 507)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 507)				int newRange = (in_byteOffset + newByteLength);
HXDLIN( 507)				if ((newRange > bufferByteLength)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 507)			_this->buffer = bytes;
HXDLIN( 507)			_this->byteOffset = in_byteOffset;
HXDLIN( 507)			_this->byteLength = newByteLength;
HXDLIN( 507)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 507)			this1 = _this;
            		}
            		else {
HXLINE( 507)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 507)		 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE( 508)		int outOffset = (firstRegister * (int)4);
HXLINE( 509)		int _hx_int = byteArrayOffset;
HXDLIN( 509)		Float inOffset;
HXDLIN( 509)		if ((_hx_int < (int)0)) {
HXLINE( 509)			inOffset = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 509)			inOffset = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 509)		int int1 = (int)4;
HXDLIN( 509)		Float inOffset1;
HXDLIN( 509)		if ((int1 < (int)0)) {
HXLINE( 509)			inOffset1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 509)			inOffset1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 509)		int inOffset2 = ::Std_obj::_hx_int(((Float)inOffset / (Float)inOffset1));
HXLINE( 511)		{
HXLINE( 511)			int _g1 = (int)0;
HXDLIN( 511)			int _g = (numRegisters * (int)4);
HXDLIN( 511)			while((_g1 < _g)){
HXLINE( 511)				_g1 = (_g1 + (int)1);
HXDLIN( 511)				int i = (_g1 - (int)1);
HXLINE( 513)				{
HXLINE( 513)					int floatData1 = floatData->byteOffset;
HXDLIN( 513)					Float val = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData1 + ((inOffset2 + i) * (int)4)));
HXDLIN( 513)					{
HXLINE( 513)						int dest1 = dest->byteOffset;
HXDLIN( 513)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((outOffset + i) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 517)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 519)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLContext3D_obj,setProgramConstantsFromByteArray,(void))

void GLContext3D_obj::setProgramConstantsFromMatrix( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_526_setProgramConstantsFromMatrix)
HXLINE( 528)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 529)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 529)		if (isVertex) {
HXLINE( 529)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 529)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 530)		 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE( 531)		int i = (firstRegister * (int)4);
HXLINE( 533)		if (transposedMatrix) {
HXLINE( 535)			{
HXLINE( 535)				i = (i + (int)1);
HXDLIN( 535)				Float val = source->get((int)0);
HXDLIN( 535)				{
HXLINE( 535)					int dest1 = dest->byteOffset;
HXDLIN( 535)					::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((i - (int)1) * (int)4)),val);
            				}
            			}
HXLINE( 536)			{
HXLINE( 536)				i = (i + (int)1);
HXDLIN( 536)				Float val1 = source->get((int)4);
HXDLIN( 536)				{
HXLINE( 536)					int dest2 = dest->byteOffset;
HXDLIN( 536)					::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((i - (int)1) * (int)4)),val1);
            				}
            			}
HXLINE( 537)			{
HXLINE( 537)				i = (i + (int)1);
HXDLIN( 537)				Float val2 = source->get((int)8);
HXDLIN( 537)				{
HXLINE( 537)					int dest3 = dest->byteOffset;
HXDLIN( 537)					::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((i - (int)1) * (int)4)),val2);
            				}
            			}
HXLINE( 538)			{
HXLINE( 538)				i = (i + (int)1);
HXDLIN( 538)				Float val3 = source->get((int)12);
HXDLIN( 538)				{
HXLINE( 538)					int dest4 = dest->byteOffset;
HXDLIN( 538)					::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((i - (int)1) * (int)4)),val3);
            				}
            			}
HXLINE( 540)			{
HXLINE( 540)				i = (i + (int)1);
HXDLIN( 540)				Float val4 = source->get((int)1);
HXDLIN( 540)				{
HXLINE( 540)					int dest5 = dest->byteOffset;
HXDLIN( 540)					::__hxcpp_memory_set_float(dest->buffer->b,(dest5 + ((i - (int)1) * (int)4)),val4);
            				}
            			}
HXLINE( 541)			{
HXLINE( 541)				i = (i + (int)1);
HXDLIN( 541)				Float val5 = source->get((int)5);
HXDLIN( 541)				{
HXLINE( 541)					int dest6 = dest->byteOffset;
HXDLIN( 541)					::__hxcpp_memory_set_float(dest->buffer->b,(dest6 + ((i - (int)1) * (int)4)),val5);
            				}
            			}
HXLINE( 542)			{
HXLINE( 542)				i = (i + (int)1);
HXDLIN( 542)				Float val6 = source->get((int)9);
HXDLIN( 542)				{
HXLINE( 542)					int dest7 = dest->byteOffset;
HXDLIN( 542)					::__hxcpp_memory_set_float(dest->buffer->b,(dest7 + ((i - (int)1) * (int)4)),val6);
            				}
            			}
HXLINE( 543)			{
HXLINE( 543)				i = (i + (int)1);
HXDLIN( 543)				Float val7 = source->get((int)13);
HXDLIN( 543)				{
HXLINE( 543)					int dest8 = dest->byteOffset;
HXDLIN( 543)					::__hxcpp_memory_set_float(dest->buffer->b,(dest8 + ((i - (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 545)			{
HXLINE( 545)				i = (i + (int)1);
HXDLIN( 545)				Float val8 = source->get((int)2);
HXDLIN( 545)				{
HXLINE( 545)					int dest9 = dest->byteOffset;
HXDLIN( 545)					::__hxcpp_memory_set_float(dest->buffer->b,(dest9 + ((i - (int)1) * (int)4)),val8);
            				}
            			}
HXLINE( 546)			{
HXLINE( 546)				i = (i + (int)1);
HXDLIN( 546)				Float val9 = source->get((int)6);
HXDLIN( 546)				{
HXLINE( 546)					int dest10 = dest->byteOffset;
HXDLIN( 546)					::__hxcpp_memory_set_float(dest->buffer->b,(dest10 + ((i - (int)1) * (int)4)),val9);
            				}
            			}
HXLINE( 547)			{
HXLINE( 547)				i = (i + (int)1);
HXDLIN( 547)				Float val10 = source->get((int)10);
HXDLIN( 547)				{
HXLINE( 547)					int dest11 = dest->byteOffset;
HXDLIN( 547)					::__hxcpp_memory_set_float(dest->buffer->b,(dest11 + ((i - (int)1) * (int)4)),val10);
            				}
            			}
HXLINE( 548)			{
HXLINE( 548)				i = (i + (int)1);
HXDLIN( 548)				Float val11 = source->get((int)14);
HXDLIN( 548)				{
HXLINE( 548)					int dest12 = dest->byteOffset;
HXDLIN( 548)					::__hxcpp_memory_set_float(dest->buffer->b,(dest12 + ((i - (int)1) * (int)4)),val11);
            				}
            			}
HXLINE( 550)			{
HXLINE( 550)				i = (i + (int)1);
HXDLIN( 550)				Float val12 = source->get((int)3);
HXDLIN( 550)				{
HXLINE( 550)					int dest13 = dest->byteOffset;
HXDLIN( 550)					::__hxcpp_memory_set_float(dest->buffer->b,(dest13 + ((i - (int)1) * (int)4)),val12);
            				}
            			}
HXLINE( 551)			{
HXLINE( 551)				i = (i + (int)1);
HXDLIN( 551)				Float val13 = source->get((int)7);
HXDLIN( 551)				{
HXLINE( 551)					int dest14 = dest->byteOffset;
HXDLIN( 551)					::__hxcpp_memory_set_float(dest->buffer->b,(dest14 + ((i - (int)1) * (int)4)),val13);
            				}
            			}
HXLINE( 552)			{
HXLINE( 552)				i = (i + (int)1);
HXDLIN( 552)				Float val14 = source->get((int)11);
HXDLIN( 552)				{
HXLINE( 552)					int dest15 = dest->byteOffset;
HXDLIN( 552)					::__hxcpp_memory_set_float(dest->buffer->b,(dest15 + ((i - (int)1) * (int)4)),val14);
            				}
            			}
HXLINE( 553)			{
HXLINE( 553)				i = (i + (int)1);
HXDLIN( 553)				Float val15 = source->get((int)15);
HXDLIN( 553)				{
HXLINE( 553)					int dest16 = dest->byteOffset;
HXDLIN( 553)					::__hxcpp_memory_set_float(dest->buffer->b,(dest16 + ((i - (int)1) * (int)4)),val15);
            				}
            			}
            		}
            		else {
HXLINE( 557)			{
HXLINE( 557)				i = (i + (int)1);
HXDLIN( 557)				Float val16 = source->get((int)0);
HXDLIN( 557)				{
HXLINE( 557)					int dest17 = dest->byteOffset;
HXDLIN( 557)					::__hxcpp_memory_set_float(dest->buffer->b,(dest17 + ((i - (int)1) * (int)4)),val16);
            				}
            			}
HXLINE( 558)			{
HXLINE( 558)				i = (i + (int)1);
HXDLIN( 558)				Float val17 = source->get((int)1);
HXDLIN( 558)				{
HXLINE( 558)					int dest18 = dest->byteOffset;
HXDLIN( 558)					::__hxcpp_memory_set_float(dest->buffer->b,(dest18 + ((i - (int)1) * (int)4)),val17);
            				}
            			}
HXLINE( 559)			{
HXLINE( 559)				i = (i + (int)1);
HXDLIN( 559)				Float val18 = source->get((int)2);
HXDLIN( 559)				{
HXLINE( 559)					int dest19 = dest->byteOffset;
HXDLIN( 559)					::__hxcpp_memory_set_float(dest->buffer->b,(dest19 + ((i - (int)1) * (int)4)),val18);
            				}
            			}
HXLINE( 560)			{
HXLINE( 560)				i = (i + (int)1);
HXDLIN( 560)				Float val19 = source->get((int)3);
HXDLIN( 560)				{
HXLINE( 560)					int dest20 = dest->byteOffset;
HXDLIN( 560)					::__hxcpp_memory_set_float(dest->buffer->b,(dest20 + ((i - (int)1) * (int)4)),val19);
            				}
            			}
HXLINE( 562)			{
HXLINE( 562)				i = (i + (int)1);
HXDLIN( 562)				Float val20 = source->get((int)4);
HXDLIN( 562)				{
HXLINE( 562)					int dest21 = dest->byteOffset;
HXDLIN( 562)					::__hxcpp_memory_set_float(dest->buffer->b,(dest21 + ((i - (int)1) * (int)4)),val20);
            				}
            			}
HXLINE( 563)			{
HXLINE( 563)				i = (i + (int)1);
HXDLIN( 563)				Float val21 = source->get((int)5);
HXDLIN( 563)				{
HXLINE( 563)					int dest22 = dest->byteOffset;
HXDLIN( 563)					::__hxcpp_memory_set_float(dest->buffer->b,(dest22 + ((i - (int)1) * (int)4)),val21);
            				}
            			}
HXLINE( 564)			{
HXLINE( 564)				i = (i + (int)1);
HXDLIN( 564)				Float val22 = source->get((int)6);
HXDLIN( 564)				{
HXLINE( 564)					int dest23 = dest->byteOffset;
HXDLIN( 564)					::__hxcpp_memory_set_float(dest->buffer->b,(dest23 + ((i - (int)1) * (int)4)),val22);
            				}
            			}
HXLINE( 565)			{
HXLINE( 565)				i = (i + (int)1);
HXDLIN( 565)				Float val23 = source->get((int)7);
HXDLIN( 565)				{
HXLINE( 565)					int dest24 = dest->byteOffset;
HXDLIN( 565)					::__hxcpp_memory_set_float(dest->buffer->b,(dest24 + ((i - (int)1) * (int)4)),val23);
            				}
            			}
HXLINE( 567)			{
HXLINE( 567)				i = (i + (int)1);
HXDLIN( 567)				Float val24 = source->get((int)8);
HXDLIN( 567)				{
HXLINE( 567)					int dest25 = dest->byteOffset;
HXDLIN( 567)					::__hxcpp_memory_set_float(dest->buffer->b,(dest25 + ((i - (int)1) * (int)4)),val24);
            				}
            			}
HXLINE( 568)			{
HXLINE( 568)				i = (i + (int)1);
HXDLIN( 568)				Float val25 = source->get((int)9);
HXDLIN( 568)				{
HXLINE( 568)					int dest26 = dest->byteOffset;
HXDLIN( 568)					::__hxcpp_memory_set_float(dest->buffer->b,(dest26 + ((i - (int)1) * (int)4)),val25);
            				}
            			}
HXLINE( 569)			{
HXLINE( 569)				i = (i + (int)1);
HXDLIN( 569)				Float val26 = source->get((int)10);
HXDLIN( 569)				{
HXLINE( 569)					int dest27 = dest->byteOffset;
HXDLIN( 569)					::__hxcpp_memory_set_float(dest->buffer->b,(dest27 + ((i - (int)1) * (int)4)),val26);
            				}
            			}
HXLINE( 570)			{
HXLINE( 570)				i = (i + (int)1);
HXDLIN( 570)				Float val27 = source->get((int)11);
HXDLIN( 570)				{
HXLINE( 570)					int dest28 = dest->byteOffset;
HXDLIN( 570)					::__hxcpp_memory_set_float(dest->buffer->b,(dest28 + ((i - (int)1) * (int)4)),val27);
            				}
            			}
HXLINE( 572)			{
HXLINE( 572)				i = (i + (int)1);
HXDLIN( 572)				Float val28 = source->get((int)12);
HXDLIN( 572)				{
HXLINE( 572)					int dest29 = dest->byteOffset;
HXDLIN( 572)					::__hxcpp_memory_set_float(dest->buffer->b,(dest29 + ((i - (int)1) * (int)4)),val28);
            				}
            			}
HXLINE( 573)			{
HXLINE( 573)				i = (i + (int)1);
HXDLIN( 573)				Float val29 = source->get((int)13);
HXDLIN( 573)				{
HXLINE( 573)					int dest30 = dest->byteOffset;
HXDLIN( 573)					::__hxcpp_memory_set_float(dest->buffer->b,(dest30 + ((i - (int)1) * (int)4)),val29);
            				}
            			}
HXLINE( 574)			{
HXLINE( 574)				i = (i + (int)1);
HXDLIN( 574)				Float val30 = source->get((int)14);
HXDLIN( 574)				{
HXLINE( 574)					int dest31 = dest->byteOffset;
HXDLIN( 574)					::__hxcpp_memory_set_float(dest->buffer->b,(dest31 + ((i - (int)1) * (int)4)),val30);
            				}
            			}
HXLINE( 575)			{
HXLINE( 575)				i = (i + (int)1);
HXDLIN( 575)				Float val31 = source->get((int)15);
HXDLIN( 575)				{
HXLINE( 575)					int dest32 = dest->byteOffset;
HXDLIN( 575)					::__hxcpp_memory_set_float(dest->buffer->b,(dest32 + ((i - (int)1) * (int)4)),val31);
            				}
            			}
            		}
HXLINE( 579)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 581)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setProgramConstantsFromMatrix,(void))

void GLContext3D_obj::setProgramConstantsFromVector( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_588_setProgramConstantsFromVector)
HXLINE( 590)		if ((numRegisters == (int)-1)) {
HXLINE( 592)			numRegisters = ((int)data->get_length() >> (int)(int)2);
            		}
HXLINE( 596)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 597)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 597)		if (isVertex) {
HXLINE( 597)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 597)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 598)		 ::openfl::_Vector::FloatVector source = data;
HXLINE( 600)		int sourceIndex = (int)0;
HXLINE( 601)		int destIndex = (firstRegister * (int)4);
HXLINE( 603)		{
HXLINE( 603)			int _g1 = (int)0;
HXDLIN( 603)			int _g = numRegisters;
HXDLIN( 603)			while((_g1 < _g)){
HXLINE( 603)				_g1 = (_g1 + (int)1);
HXDLIN( 603)				int i = (_g1 - (int)1);
HXLINE( 605)				{
HXLINE( 605)					destIndex = (destIndex + (int)1);
HXDLIN( 605)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 605)					Float val = source->get((sourceIndex - (int)1));
HXDLIN( 605)					{
HXLINE( 605)						int dest1 = dest->byteOffset;
HXDLIN( 605)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((destIndex - (int)1) * (int)4)),val);
            					}
            				}
HXLINE( 606)				{
HXLINE( 606)					destIndex = (destIndex + (int)1);
HXDLIN( 606)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 606)					Float val1 = source->get((sourceIndex - (int)1));
HXDLIN( 606)					{
HXLINE( 606)						int dest2 = dest->byteOffset;
HXDLIN( 606)						::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((destIndex - (int)1) * (int)4)),val1);
            					}
            				}
HXLINE( 607)				{
HXLINE( 607)					destIndex = (destIndex + (int)1);
HXDLIN( 607)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 607)					Float val2 = source->get((sourceIndex - (int)1));
HXDLIN( 607)					{
HXLINE( 607)						int dest3 = dest->byteOffset;
HXDLIN( 607)						::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((destIndex - (int)1) * (int)4)),val2);
            					}
            				}
HXLINE( 608)				{
HXLINE( 608)					destIndex = (destIndex + (int)1);
HXDLIN( 608)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 608)					Float val3 = source->get((sourceIndex - (int)1));
HXDLIN( 608)					{
HXLINE( 608)						int dest4 = dest->byteOffset;
HXDLIN( 608)						::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((destIndex - (int)1) * (int)4)),val3);
            					}
            				}
            			}
            		}
HXLINE( 612)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 614)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setProgramConstantsFromVector,(void))

void GLContext3D_obj::setRenderToBackBuffer( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_621_setRenderToBackBuffer)
HXLINE( 623)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 624)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 626)		gl->bindFramebuffer(gl->FRAMEBUFFER,null());
HXLINE( 627)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 629)		gl->frontFace(gl->CCW);
HXLINE( 630)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 632)		context->_hx___renderToTexture = null();
HXLINE( 633)		context->_hx___scissorRectangle = null();
HXLINE( 634)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
HXLINE( 635)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
HXLINE( 636)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateDepthAndStencilState();
HXLINE( 638)		{
HXLINE( 638)			 ::lime::utils::ArrayBufferView this1 = context->_hx___positionScale;
HXDLIN( 638)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)1.0));
            		}
HXLINE( 640)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 642)			context->_hx___program->_hx___setPositionScale(context->_hx___positionScale);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,setRenderToBackBuffer,(void))

void GLContext3D_obj::setRenderToTexture( ::openfl::display3D::Context3D context, ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_649_setRenderToTexture)
HXLINE( 651)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 652)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 654)		int width = (int)0;
HXLINE( 655)		int height = (int)0;
HXLINE( 657)		if (hx::IsNull( context->_hx___framebuffer )) {
HXLINE( 659)			context->_hx___framebuffer = gl->createFramebuffer();
HXLINE( 660)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 664)		gl->bindFramebuffer(gl->FRAMEBUFFER,context->_hx___framebuffer);
HXLINE( 665)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 667)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 669)			 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 670)			width = texture2D->_hx___width;
HXLINE( 671)			height = texture2D->_hx___height;
HXLINE( 673)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture->_hx___textureID,(int)0);
HXLINE( 674)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE( 676)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 678)				 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 679)				width = rectTexture->_hx___width;
HXLINE( 680)				height = rectTexture->_hx___height;
HXLINE( 682)				gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture->_hx___textureID,(int)0);
HXLINE( 683)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 685)				if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE( 687)					 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(texture) );
HXLINE( 688)					width = cubeTexture->_hx___size;
HXLINE( 689)					height = cubeTexture->_hx___size;
HXLINE( 691)					{
HXLINE( 691)						int _g = (int)0;
HXDLIN( 691)						while((_g < (int)6)){
HXLINE( 691)							_g = (_g + (int)1);
HXDLIN( 691)							int i = (_g - (int)1);
HXLINE( 693)							int gl1 = gl->FRAMEBUFFER;
HXDLIN( 693)							int gl2 = gl->COLOR_ATTACHMENT0;
HXDLIN( 693)							gl->framebufferTexture2D(gl1,gl2,(gl->TEXTURE_CUBE_MAP_POSITIVE_X + i),texture->_hx___textureID,(int)0);
HXLINE( 694)							::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            						}
            					}
            				}
            				else {
HXLINE( 700)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Invalid texture",92,3e,59,9a),null()));
            				}
            			}
            		}
HXLINE( 704)		if (enableDepthAndStencil) {
HXLINE( 706)			if (context->_hx___supportsPackedDepthStencil) {
HXLINE( 708)				if (hx::IsNull( context->_hx___depthStencilRenderBuffer )) {
HXLINE( 710)					context->_hx___depthStencilRenderBuffer = gl->createRenderbuffer();
HXLINE( 711)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 715)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___depthStencilRenderBuffer);
HXLINE( 716)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 717)				gl->renderbufferStorage(gl->RENDERBUFFER,::openfl::display3D::Context3D_obj::DEPTH_STENCIL,width,height);
HXLINE( 718)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 720)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_STENCIL_ATTACHMENT,gl->RENDERBUFFER,context->_hx___depthStencilRenderBuffer);
HXLINE( 721)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 725)				if (hx::IsNull( context->_hx___depthRenderBuffer )) {
HXLINE( 727)					context->_hx___depthRenderBuffer = gl->createRenderbuffer();
HXLINE( 728)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 732)				if (hx::IsNull( context->_hx___stencilRenderBuffer )) {
HXLINE( 734)					context->_hx___stencilRenderBuffer = gl->createRenderbuffer();
HXLINE( 735)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 739)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___depthRenderBuffer);
HXLINE( 740)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 741)				gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT16,width,height);
HXLINE( 742)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 743)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___stencilRenderBuffer);
HXLINE( 744)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 745)				gl->renderbufferStorage(gl->RENDERBUFFER,gl->STENCIL_INDEX8,width,height);
HXLINE( 746)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 748)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_ATTACHMENT,gl->RENDERBUFFER,context->_hx___depthRenderBuffer);
HXLINE( 749)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 750)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->STENCIL_ATTACHMENT,gl->RENDERBUFFER,context->_hx___stencilRenderBuffer);
HXLINE( 751)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 755)			gl->bindRenderbuffer(gl->RENDERBUFFER,null());
HXLINE( 756)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 760)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 762)		if (context->_hx___enableErrorChecking) {
HXLINE( 764)			int code = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXLINE( 766)			if ((code != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 768)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 768)				_hx_tmp((((((HX_("Error: Context3D.setRenderToTexture status:",4c,0a,86,52) + code) + HX_(" width:",94,67,ab,7e)) + width) + HX_(" height:",53,26,89,26)) + height),hx::SourceInfo(HX_("GLContext3D.hx",23,90,06,f9),768,HX_("openfl._internal.stage3D.opengl.GLContext3D",4b,37,5a,da),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 774)		{
HXLINE( 774)			 ::lime::utils::ArrayBufferView this1 = context->_hx___positionScale;
HXDLIN( 774)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)-1.0));
            		}
HXLINE( 776)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 778)			context->_hx___program->_hx___setPositionScale(context->_hx___positionScale);
            		}
HXLINE( 782)		gl->frontFace(gl->CW);
HXLINE( 783)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 785)		context->_hx___renderToTexture = texture;
HXLINE( 786)		context->_hx___scissorRectangle = null();
HXLINE( 787)		context->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 788)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
HXLINE( 789)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateDepthAndStencilState();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setRenderToTexture,(void))

void GLContext3D_obj::setSamplerStateAt( ::openfl::display3D::Context3D context,int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_794_setSamplerStateAt)
HXLINE( 796)		bool _hx_tmp;
HXDLIN( 796)		if ((sampler >= (int)0)) {
HXLINE( 796)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 796)			_hx_tmp = true;
            		}
HXDLIN( 796)		if (_hx_tmp) {
HXLINE( 798)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 802)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 803)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 804)		 ::openfl::_internal::stage3D::SamplerState state = context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 806)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 810)			state->set_wrapModeS(gl->CLAMP_TO_EDGE);
HXLINE( 811)			state->set_wrapModeT(gl->CLAMP_TO_EDGE);
HXLINE( 808)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 815)			state->set_wrapModeS(gl->CLAMP_TO_EDGE);
HXLINE( 816)			state->set_wrapModeT(gl->REPEAT);
HXLINE( 813)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 820)			state->set_wrapModeS(gl->REPEAT);
HXLINE( 821)			state->set_wrapModeT(gl->REPEAT);
HXLINE( 818)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 825)			state->set_wrapModeS(gl->REPEAT);
HXLINE( 826)			state->set_wrapModeT(gl->CLAMP_TO_EDGE);
HXLINE( 823)			goto _hx_goto_26;
            		}
            		/* default */{
HXLINE( 830)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_26:;
HXLINE( 834)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 882)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 884)				Float _hx_tmp1;
HXDLIN( 884)				if ((context->_hx___maxAnisotropyTexture2D < (int)16)) {
HXLINE( 884)					_hx_tmp1 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 884)					_hx_tmp1 = (int)16;
            				}
HXDLIN( 884)				state->set_maxAniso(_hx_tmp1);
            			}
HXLINE( 882)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 858)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 860)				Float _hx_tmp2;
HXDLIN( 860)				if ((context->_hx___maxAnisotropyTexture2D < (int)2)) {
HXLINE( 860)					_hx_tmp2 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 860)					_hx_tmp2 = (int)2;
            				}
HXDLIN( 860)				state->set_maxAniso(_hx_tmp2);
            			}
HXLINE( 858)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 866)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 868)				Float _hx_tmp3;
HXDLIN( 868)				if ((context->_hx___maxAnisotropyTexture2D < (int)4)) {
HXLINE( 868)					_hx_tmp3 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 868)					_hx_tmp3 = (int)4;
            				}
HXDLIN( 868)				state->set_maxAniso(_hx_tmp3);
            			}
HXLINE( 866)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 874)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 876)				Float _hx_tmp4;
HXDLIN( 876)				if ((context->_hx___maxAnisotropyTexture2D < (int)8)) {
HXLINE( 876)					_hx_tmp4 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 876)					_hx_tmp4 = (int)8;
            				}
HXDLIN( 876)				state->set_maxAniso(_hx_tmp4);
            			}
HXLINE( 874)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 838)			state->set_magFilter(gl->LINEAR);
HXLINE( 840)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 842)				state->set_maxAniso((int)1);
            			}
HXLINE( 836)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 848)			state->set_magFilter(gl->NEAREST);
HXLINE( 850)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 852)				state->set_maxAniso((int)1);
            			}
HXLINE( 846)			goto _hx_goto_27;
            		}
            		/* default */{
HXLINE( 890)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_27:;
HXLINE( 894)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 898)			int _hx_tmp5;
HXDLIN( 898)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 898)				_hx_tmp5 = gl->NEAREST_MIPMAP_LINEAR;
            			}
            			else {
HXLINE( 898)				_hx_tmp5 = gl->LINEAR_MIPMAP_LINEAR;
            			}
HXDLIN( 898)			state->set_minFilter(_hx_tmp5);
HXDLIN( 898)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 902)			int _hx_tmp6;
HXDLIN( 902)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 902)				_hx_tmp6 = gl->NEAREST_MIPMAP_NEAREST;
            			}
            			else {
HXLINE( 902)				_hx_tmp6 = gl->LINEAR_MIPMAP_NEAREST;
            			}
HXDLIN( 902)			state->set_minFilter(_hx_tmp6);
HXDLIN( 902)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 906)			int _hx_tmp7;
HXDLIN( 906)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 906)				_hx_tmp7 = gl->NEAREST;
            			}
            			else {
HXLINE( 906)				_hx_tmp7 = gl->LINEAR;
            			}
HXDLIN( 906)			state->set_minFilter(_hx_tmp7);
HXDLIN( 906)			goto _hx_goto_28;
            		}
            		/* default */{
HXLINE( 910)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_28:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setSamplerStateAt,(void))

void GLContext3D_obj::setScissorRectangle( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_917_setScissorRectangle)
HXLINE( 919)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 920)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 921)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 923)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 923)		if (hx::IsNotNull( rectangle )) {
HXLINE( 923)			_hx_tmp = rectangle->clone();
            		}
            		else {
HXLINE( 923)			_hx_tmp = null();
            		}
HXDLIN( 923)		context->_hx___scissorRectangle = _hx_tmp;
HXLINE( 924)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setScissorRectangle,(void))

void GLContext3D_obj::setStencilActions( ::openfl::display3D::Context3D context, ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_929_setStencilActions)
HXLINE( 931)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 932)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 933)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 935)		context->_hx___stencilCompareMode = compareMode;
HXLINE( 936)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 936)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLTriangleFace(triangleFace);
HXDLIN( 936)		int _hx_tmp2 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnDepthPassStencilFail);
HXDLIN( 936)		int _hx_tmp3 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnDepthFail);
HXDLIN( 936)		_hx_tmp->stencilOpSeparate(_hx_tmp1,_hx_tmp2,_hx_tmp3,::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnBothPass));
HXLINE( 937)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp4 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 937)		int _hx_tmp5 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLCompareMode(context->_hx___stencilCompareMode);
HXDLIN( 937)		_hx_tmp4->stencilFunc(_hx_tmp5,context->_hx___stencilRef,context->_hx___stencilReadMask);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLContext3D_obj,setStencilActions,(void))

void GLContext3D_obj::setStencilReferenceValue( ::openfl::display3D::Context3D context,int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_942_setStencilReferenceValue)
HXLINE( 944)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 945)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 946)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE( 948)		context->_hx___stencilReadMask = readMask;
HXLINE( 949)		context->_hx___stencilRef = referenceValue;
HXLINE( 951)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 951)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLCompareMode(context->_hx___stencilCompareMode);
HXDLIN( 951)		_hx_tmp->stencilFunc(_hx_tmp1,context->_hx___stencilRef,context->_hx___stencilReadMask);
HXLINE( 952)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->stencilMask(writeMask);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,setStencilReferenceValue,(void))

void GLContext3D_obj::setTextureAt( ::openfl::display3D::Context3D context,int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_959_setTextureAt)
HXDLIN( 959)		if (hx::IsNotEq( context->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >(),texture )) {
HXLINE( 961)			context->_hx___samplerTextures->set(sampler,texture).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 962)			 ::openfl::display3D::Context3D context1 = context;
HXDLIN( 962)			context1->_hx___samplerDirty = ((int)context1->_hx___samplerDirty | (int)((int)(int)1 << (int)sampler));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setTextureAt,(void))

void GLContext3D_obj::setVertexBufferAt( ::openfl::display3D::Context3D context,int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_969_setVertexBufferAt)
HXLINE( 971)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE( 972)		 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXLINE( 974)		if (hx::IsNull( buffer )) {
HXLINE( 976)			gl->disableVertexAttribArray(index);
HXLINE( 977)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 979)			gl->bindBuffer(gl->ARRAY_BUFFER,null());
HXLINE( 980)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 982)			return;
            		}
HXLINE( 986)		gl->enableVertexAttribArray(index);
HXLINE( 987)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 989)		gl->bindBuffer(gl->ARRAY_BUFFER,buffer->_hx___id);
HXLINE( 990)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 992)		int byteOffset = (bufferOffset * (int)4);
HXLINE( 994)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 998)			int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 998)			int buffer1 = buffer->_hx___stride;
HXDLIN( 998)			gl->vertexAttribPointer(index,(int)4,gl1,true,buffer1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 999)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 996)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1018)			int gl2 = gl->FLOAT;
HXDLIN(1018)			int buffer2 = buffer->_hx___stride;
HXDLIN(1018)			gl->vertexAttribPointer(index,(int)1,gl2,false,buffer2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE(1019)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1016)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1013)			int gl3 = gl->FLOAT;
HXDLIN(1013)			int buffer3 = buffer->_hx___stride;
HXDLIN(1013)			gl->vertexAttribPointer(index,(int)2,gl3,false,buffer3,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE(1014)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1011)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1008)			int gl4 = gl->FLOAT;
HXDLIN(1008)			int buffer4 = buffer->_hx___stride;
HXDLIN(1008)			gl->vertexAttribPointer(index,(int)3,gl4,false,buffer4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE(1009)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1006)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1003)			int gl5 = gl->FLOAT;
HXDLIN(1003)			int buffer5 = buffer->_hx___stride;
HXDLIN(1003)			gl->vertexAttribPointer(index,(int)4,gl5,false,buffer5,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE(1004)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1001)			goto _hx_goto_34;
            		}
            		/* default */{
HXLINE(1023)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_34:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setVertexBufferAt,(void))

void GLContext3D_obj::_hx___flushSamplerState(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1030___flushSamplerState)
HXLINE(1032)		int sampler = (int)0;
HXLINE(1034)		while((::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerDirty != (int)0)){
HXLINE(1036)			int _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerDirty;
HXDLIN(1036)			if ((((int)_hx_tmp & (int)((int)(int)1 << (int)sampler)) != (int)0)) {
HXLINE(1038)				if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler)) {
HXLINE(1040)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1040)					_hx_tmp1->activeTexture((::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE0 + sampler));
HXLINE(1041)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1045)				 ::openfl::display3D::textures::TextureBase texture = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(1047)				if (hx::IsNotNull( texture )) {
HXLINE(1049)					int target = texture->_hx___textureTarget;
HXLINE(1051)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp2 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1051)					_hx_tmp2->bindTexture(target,texture->_hx___getTexture());
HXLINE(1052)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1054)					texture->_hx___setSamplerState(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            				else {
HXLINE(1058)					::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->bindTexture(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE_2D,null());
HXLINE(1059)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1063)				if (::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >()->textureAlpha) {
HXLINE(1065)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp3 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1065)					_hx_tmp3->activeTexture(((::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE0 + sampler) + (int)4));
HXLINE(1066)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1068)					bool _hx_tmp4;
HXDLIN(1068)					if (hx::IsNotNull( texture )) {
HXLINE(1068)						_hx_tmp4 = hx::IsNotNull( texture->_hx___alphaTexture );
            					}
            					else {
HXLINE(1068)						_hx_tmp4 = false;
            					}
HXDLIN(1068)					if (_hx_tmp4) {
HXLINE(1070)						int target1 = texture->_hx___alphaTexture->_hx___textureTarget;
HXLINE(1072)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp5 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1072)						_hx_tmp5->bindTexture(target1,texture->_hx___alphaTexture->_hx___getTexture());
HXLINE(1073)						::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1075)						 ::openfl::display3D::textures::TextureBase texture1 = texture->_hx___alphaTexture;
HXDLIN(1075)						texture1->_hx___setSamplerState(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
HXLINE(1077)						::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->uniform1i(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___program->_hx___alphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,(int)1);
HXLINE(1078)						::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            					}
            					else {
HXLINE(1082)						::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->bindTexture(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE_2D,null());
HXLINE(1083)						::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1085)						::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->uniform1i(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___program->_hx___alphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,(int)0);
HXLINE(1086)						::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            					}
            				}
HXLINE(1092)				 ::openfl::display3D::Context3D _hx_tmp6 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context;
HXDLIN(1092)				_hx_tmp6->_hx___samplerDirty = ((int)_hx_tmp6->_hx___samplerDirty & (int)~(((int)(int)1 << (int)sampler)));
            			}
HXLINE(1096)			sampler = (sampler + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___flushSamplerState,(void))

int GLContext3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1105___getGLCompareMode)
HXDLIN(1105)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1107)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ALWAYS;
HXDLIN(1107)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1108)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->EQUAL;
HXDLIN(1108)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1109)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->GREATER;
HXDLIN(1109)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1110)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->GEQUAL;
HXDLIN(1110)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1111)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->LESS;
HXDLIN(1111)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1112)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->LEQUAL;
HXDLIN(1112)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1113)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NEVER;
HXDLIN(1113)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1114)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NOTEQUAL;
HXDLIN(1114)			goto _hx_goto_38;
            		}
            		/* default */{
HXLINE(1115)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->EQUAL;
            		}
            		_hx_goto_38:;
HXLINE(1105)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLCompareMode,return )

int GLContext3D_obj::_hx___getGLTriangleFace( ::Dynamic triangleFace){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1124___getGLTriangleFace)
HXDLIN(1124)		 ::Dynamic _hx_switch_0 = triangleFace;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1127)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->BACK;
HXDLIN(1127)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1126)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT;
HXDLIN(1126)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1128)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT_AND_BACK;
HXDLIN(1128)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1129)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NONE;
HXDLIN(1129)			goto _hx_goto_40;
            		}
            		/* default */{
HXLINE(1130)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT_AND_BACK;
            		}
            		_hx_goto_40:;
HXLINE(1124)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLTriangleFace,return )

int GLContext3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1139___getGLStencilAction)
HXDLIN(1139)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1141)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DECR;
HXDLIN(1141)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1142)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DECR_WRAP;
HXDLIN(1142)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1143)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INCR;
HXDLIN(1143)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1144)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INCR_WRAP;
HXDLIN(1144)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1145)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INVERT;
HXDLIN(1145)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1146)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->KEEP;
HXDLIN(1146)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1147)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->REPLACE;
HXDLIN(1147)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1148)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1148)			goto _hx_goto_42;
            		}
            		/* default */{
HXLINE(1149)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->KEEP;
            		}
            		_hx_goto_42:;
HXLINE(1139)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLStencilAction,return )

bool GLContext3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1158___hasGLExtension)
HXDLIN(1158)		return (::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->getSupportedExtensions()->indexOf(name,null()) != (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___hasGLExtension,return )

void GLContext3D_obj::_hx___setViewport(int originX,int originY,int width,int height){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1163___setViewport)
HXLINE(1165)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1165)			originY = (originY * (int)-1);
            		}
HXLINE(1167)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height)) {
HXLINE(1169)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->viewport(originX,originY,width,height);
HXLINE(1170)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,_hx___setViewport,(void))

void GLContext3D_obj::_hx___updateBackbufferViewportTEMP( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1263___updateBackbufferViewportTEMP)
HXLINE(1265)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE(1266)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE(1267)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE(1269)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___updateBackbufferViewportTEMP,(void))

void GLContext3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1274___updateBackbufferViewport)
HXLINE(1276)		if (!(::openfl::display::Stage3D_obj::_hx___active)) {
HXLINE(1278)			::openfl::display::Stage3D_obj::_hx___active = true;
HXLINE(1279)			 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderer) );
HXLINE(1280)			renderer->_hx___clear();
            		}
HXLINE(1284)		bool _hx_tmp;
HXDLIN(1284)		bool _hx_tmp1;
HXDLIN(1284)		if (hx::IsNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1284)			_hx_tmp1 = (::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferWidth > (int)0);
            		}
            		else {
HXLINE(1284)			_hx_tmp1 = false;
            		}
HXDLIN(1284)		if (_hx_tmp1) {
HXLINE(1284)			_hx_tmp = (::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight > (int)0);
            		}
            		else {
HXLINE(1284)			_hx_tmp = false;
            		}
HXDLIN(1284)		if (_hx_tmp) {
HXLINE(1286)			 ::lime::ui::Window window = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->_hx___stage->window;
HXLINE(1288)			int x = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_x());
HXLINE(1289)			Float y = ((window->_hx___height * window->_hx___scale) - ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight);
HXDLIN(1289)			int y1 = ::Std_obj::_hx_int((y - ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_y()));
HXLINE(1291)			int _hx_tmp2;
HXDLIN(1291)			if ((x > (int)0)) {
HXLINE(1291)				_hx_tmp2 = x;
            			}
            			else {
HXLINE(1291)				_hx_tmp2 = (int)0;
            			}
HXDLIN(1291)			int _hx_tmp3;
HXDLIN(1291)			if ((y1 > (int)0)) {
HXLINE(1291)				_hx_tmp3 = y1;
            			}
            			else {
HXLINE(1291)				_hx_tmp3 = (int)0;
            			}
HXDLIN(1291)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___setViewport(_hx_tmp2,_hx_tmp3,::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferWidth,::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateBackbufferViewport,(void))

void GLContext3D_obj::_hx___updateBlendFactorsTEMP( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1298___updateBlendFactorsTEMP)
HXLINE(1300)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE(1301)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(context->_hx___renderer) );
HXLINE(1302)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = renderer->_hx___gl;
HXLINE(1304)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBlendFactors();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___updateBlendFactorsTEMP,(void))

void GLContext3D_obj::_hx___updateBlendFactors(){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_1309___updateBlendFactors)
HXLINE(1311)		bool _hx_tmp;
HXDLIN(1311)		if (hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor )) {
HXLINE(1311)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1311)			_hx_tmp = true;
            		}
HXDLIN(1311)		if (_hx_tmp) {
HXLINE(1313)			return;
            		}
HXLINE(1317)		int src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXLINE(1318)		int dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXLINE(1319)		{
HXLINE(1319)			 ::Dynamic _g = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
HXDLIN(1319)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(1324)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_ALPHA;
HXDLIN(1324)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(1325)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_COLOR;
HXDLIN(1325)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(1321)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXDLIN(1321)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE(1327)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_ALPHA;
HXDLIN(1327)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE(1328)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_COLOR;
HXDLIN(1328)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE(1326)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(1326)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE(1323)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_ALPHA;
HXDLIN(1323)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_0==(int)9) ){
HXLINE(1322)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1322)				goto _hx_goto_49;
            			}
            			/* default */{
HXLINE(1330)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_49:;
            		}
HXLINE(1334)		{
HXLINE(1334)			 ::Dynamic _g1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
HXDLIN(1334)			 ::Dynamic _hx_switch_1 = _g1;
            			if (  (_hx_switch_1==(int)0) ){
HXLINE(1340)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_ALPHA;
HXDLIN(1340)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)2) ){
HXLINE(1336)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXDLIN(1336)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)3) ){
HXLINE(1343)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_ALPHA;
HXDLIN(1343)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)5) ){
HXLINE(1341)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(1341)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)6) ){
HXLINE(1342)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_COLOR;
HXDLIN(1342)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)7) ){
HXLINE(1338)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_ALPHA;
HXDLIN(1338)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)8) ){
HXLINE(1339)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_COLOR;
HXDLIN(1339)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_1==(int)9) ){
HXLINE(1337)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1337)				goto _hx_goto_50;
            			}
            			/* default */{
HXLINE(1345)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_50:;
            		}
HXLINE(1349)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->BLEND);
HXLINE(1350)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1351)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->blendFunc(src,dest);
HXLINE(1352)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateBlendFactors,(void))

void GLContext3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1357___updateDepthAndStencilState)
HXLINE(1359)		bool depthAndStencil;
HXDLIN(1359)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1359)			depthAndStencil = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1359)			depthAndStencil = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1361)		if (depthAndStencil) {
HXLINE(1363)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DEPTH_TEST);
HXLINE(1364)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1365)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->STENCIL_TEST);
HXLINE(1366)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1370)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DEPTH_TEST);
HXLINE(1371)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1372)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->STENCIL_TEST);
HXLINE(1373)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateDepthAndStencilState,(void))

void GLContext3D_obj::_hx___updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1380___updateScissorRectangle)
HXLINE(1382)		if (hx::IsNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle )) {
HXLINE(1384)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SCISSOR_TEST);
HXLINE(1385)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1386)			return;
            		}
HXLINE(1390)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SCISSOR_TEST);
HXLINE(1391)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1393)		int height = (int)0;
HXLINE(1394)		int offsetX = (int)0;
HXLINE(1395)		int offsetY = (int)0;
HXLINE(1397)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1399)			if (::Std_obj::is(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1401)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture) );
HXLINE(1402)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(1404)				if (::Std_obj::is(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1406)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture) );
HXLINE(1407)					height = rectTexture->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1413)			 ::lime::ui::Window window = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->_hx___stage->window;
HXLINE(1415)			height = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight;
HXLINE(1416)			offsetX = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_x());
HXLINE(1417)			int offsetY1 = (::Std_obj::_hx_int((window->_hx___height * window->_hx___scale)) - height);
HXDLIN(1417)			offsetY = (offsetY1 - ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_y()));
            		}
HXLINE(1421)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1421)		int _hx_tmp1 = (::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->x) + offsetX);
HXLINE(1422)		int _hx_tmp2 = (height - ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->y));
HXDLIN(1422)		int _hx_tmp3 = ((_hx_tmp2 - ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->height)) + offsetY);
HXLINE(1423)		int _hx_tmp4 = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->width);
HXLINE(1421)		_hx_tmp->scissor(_hx_tmp1,_hx_tmp3,_hx_tmp4,::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->height));
HXLINE(1426)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateScissorRectangle,(void))


GLContext3D_obj::GLContext3D_obj()
{
}

bool GLContext3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { outValue = ( gl ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = ( context ); return true; }
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"present") ) { outValue = present_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setCulling") ) { outValue = setCulling_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setProgram") ) { outValue = setProgram_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setColorMask") ) { outValue = setColorMask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { outValue = setDepthTest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { outValue = setTextureAt_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { outValue = drawTriangles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { outValue = _hx___setViewport_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { outValue = setBlendFactors_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { outValue = drawToBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { outValue = _hx___hasGLExtension_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { outValue = setSamplerStateAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { outValue = setStencilActions_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { outValue = setVertexBufferAt_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { outValue = setRenderToTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { outValue = _hx___getGLCompareMode_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { outValue = configureBackBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { outValue = setScissorRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { outValue = _hx___flushSamplerState_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getGLTriangleFace") ) { outValue = _hx___getGLTriangleFace_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { outValue = _hx___getGLStencilAction_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { outValue = _hx___updateBlendFactors_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { outValue = setRenderToBackBuffer_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setEnableErrorChecking") ) { outValue = setEnableErrorChecking_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { outValue = setStencilReferenceValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateBlendFactorsTEMP") ) { outValue = _hx___updateBlendFactorsTEMP_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { outValue = _hx___updateScissorRectangle_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { outValue = _hx___updateBackbufferViewport_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { outValue = _hx___updateDepthAndStencilState_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { outValue = setProgramConstantsFromMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { outValue = setProgramConstantsFromVector_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewportTEMP") ) { outValue = _hx___updateBackbufferViewportTEMP_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { outValue = setProgramConstantsFromByteArray_dyn(); return true; }
	}
	return false;
}

bool GLContext3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=ioValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast<  ::openfl::display3D::Context3D >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLContext3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GLContext3D_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(void *) &GLContext3D_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(void *) &GLContext3D_obj::gl,HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GLContext3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLContext3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GLContext3D_obj::context,"context");
	HX_MARK_MEMBER_NAME(GLContext3D_obj::gl,"gl");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLContext3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::context,"context");
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::gl,"gl");
};

#endif

hx::Class GLContext3D_obj::__mClass;

static ::String GLContext3D_obj_sStaticFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setEnableErrorChecking","\xfd","\x25","\xdc","\xc5"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLTriangleFace","\x40","\x95","\x87","\xc3"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__updateBackbufferViewportTEMP","\x8a","\x87","\xfb","\xad"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	HX_HCSTRING("__updateBlendFactorsTEMP","\x50","\x28","\xf1","\xa5"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	::String(null())
};

void GLContext3D_obj::__register()
{
	hx::Object *dummy = new GLContext3D_obj;
	GLContext3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLContext3D","\x4b","\x37","\x5a","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLContext3D_obj::__GetStatic;
	__mClass->mSetStaticField = &GLContext3D_obj::__SetStatic;
	__mClass->mMarkFunc = GLContext3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLContext3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLContext3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLContext3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLContext3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLContext3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
