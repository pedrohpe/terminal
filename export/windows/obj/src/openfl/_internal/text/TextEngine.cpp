// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_121_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",121,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",169,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_164_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",164,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_258_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",258,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_592_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",592,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_613_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",613,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_632_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",632,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_834_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",834,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1587_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1587,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1612_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1612,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1727_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1727,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1746_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1746,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1784_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1784,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1811_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1811,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_195_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",195,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_231_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",231,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_268_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",268,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_324_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",324,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_387_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",387,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_50_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",50,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_51_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",51,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_52_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",52,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_55_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",55,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_121_new)
HXLINE( 123)		this->textField = textField;
HXLINE( 125)		this->width = (int)100;
HXLINE( 126)		this->height = (int)100;
HXLINE( 127)		this->set_text(HX_("",00,00,00,00));
HXLINE( 129)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 131)		this->type = (int)0;
HXLINE( 132)		this->autoSize = (int)2;
HXLINE( 133)		this->embedFonts = false;
HXLINE( 134)		this->selectable = true;
HXLINE( 135)		this->borderColor = (int)0;
HXLINE( 136)		this->border = false;
HXLINE( 137)		this->backgroundColor = (int)16777215;
HXLINE( 138)		this->background = false;
HXLINE( 139)		this->gridFitType = (int)1;
HXLINE( 140)		this->maxChars = (int)0;
HXLINE( 141)		this->multiline = false;
HXLINE( 142)		this->sharpness = (int)0;
HXLINE( 143)		this->scrollH = (int)0;
HXLINE( 144)		this->scrollV = (int)1;
HXLINE( 145)		this->wordWrap = false;
HXLINE( 147)		int length = null();
HXDLIN( 147)		bool fixed = null();
HXDLIN( 147)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 148)		int length1 = null();
HXDLIN( 148)		bool fixed1 = null();
HXDLIN( 148)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 149)		int length2 = null();
HXDLIN( 149)		bool fixed2 = null();
HXDLIN( 149)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null(),true);
HXLINE( 150)		int length3 = null();
HXDLIN( 150)		bool fixed3 = null();
HXDLIN( 150)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null(),true);
HXLINE( 151)		int length4 = null();
HXDLIN( 151)		bool fixed4 = null();
HXDLIN( 151)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null(),true);
HXLINE( 152)		int length5 = null();
HXDLIN( 152)		bool fixed5 = null();
HXDLIN( 152)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null(),true);
HXLINE( 153)		int length6 = null();
HXDLIN( 153)		bool fixed6 = null();
HXDLIN( 153)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null(),true);
HXLINE( 154)		int length7 = null();
HXDLIN( 154)		bool fixed7 = null();
HXDLIN( 154)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null(),true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp)
HXLINE( 171)			::Array< ::String > declined1 = declined;
HXDLIN( 171)			int accepted1 = (int)0;
HXDLIN( 171)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 171)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 172)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_164_createRestrictRegexp)
HXLINE( 166)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 167)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 169)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 176)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 178)		if ((accepted.length > (int)0)) {
HXLINE( 180)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 184)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 186)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 190)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_258_getBounds)
HXLINE( 260)		int padding;
HXDLIN( 260)		if (this->border) {
HXLINE( 260)			padding = (int)1;
            		}
            		else {
HXLINE( 260)			padding = (int)0;
            		}
HXLINE( 262)		this->bounds->width = (this->width + padding);
HXLINE( 263)		this->bounds->height = (this->height + padding);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_592_getLine)
HXLINE( 594)		bool _hx_tmp;
HXDLIN( 594)		if ((index >= (int)0)) {
HXLINE( 594)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 594)			_hx_tmp = true;
            		}
HXDLIN( 594)		if (_hx_tmp) {
HXLINE( 596)			return null();
            		}
HXLINE( 600)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 602)			return this->text;
            		}
            		else {
HXLINE( 606)			::String _hx_tmp1 = this->text;
HXDLIN( 606)			int _hx_tmp2;
HXDLIN( 606)			if ((index > (int)0)) {
HXLINE( 606)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 606)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 606)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 600)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_613_getLineBreakIndex)
HXLINE( 615)		int br = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("<br>",b2,8d,f3,27),startIndex);
HXLINE( 616)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 617)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 619)		bool _hx_tmp;
HXDLIN( 619)		if ((cr == (int)-1)) {
HXLINE( 619)			_hx_tmp = (br == (int)-1);
            		}
            		else {
HXLINE( 619)			_hx_tmp = false;
            		}
HXDLIN( 619)		if (_hx_tmp) {
HXLINE( 619)			return lf;
            		}
HXLINE( 620)		bool _hx_tmp1;
HXDLIN( 620)		if ((lf == (int)-1)) {
HXLINE( 620)			_hx_tmp1 = (br == (int)-1);
            		}
            		else {
HXLINE( 620)			_hx_tmp1 = false;
            		}
HXDLIN( 620)		if (_hx_tmp1) {
HXLINE( 620)			return cr;
            		}
HXLINE( 621)		bool _hx_tmp2;
HXDLIN( 621)		if ((lf == (int)-1)) {
HXLINE( 621)			_hx_tmp2 = (cr == (int)-1);
            		}
            		else {
HXLINE( 621)			_hx_tmp2 = false;
            		}
HXDLIN( 621)		if (_hx_tmp2) {
HXLINE( 621)			return br;
            		}
HXLINE( 623)		if ((cr == (int)-1)) {
HXLINE( 623)			return ::Std_obj::_hx_int(::Math_obj::min(br,lf));
            		}
HXLINE( 624)		if ((lf == (int)-1)) {
HXLINE( 624)			return ::Std_obj::_hx_int(::Math_obj::min(br,cr));
            		}
HXLINE( 625)		if ((br == (int)-1)) {
HXLINE( 625)			return ::Std_obj::_hx_int(::Math_obj::min(cr,lf));
            		}
HXLINE( 627)		return ::Std_obj::_hx_int(::Math_obj::min(::Math_obj::min(cr,lf),br));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_632_getLineMeasurements)
HXLINE( 634)		this->lineAscents->set_length((int)0);
HXLINE( 635)		this->lineDescents->set_length((int)0);
HXLINE( 636)		this->lineLeadings->set_length((int)0);
HXLINE( 637)		this->lineHeights->set_length((int)0);
HXLINE( 638)		this->lineWidths->set_length((int)0);
HXLINE( 640)		Float currentLineAscent = ((Float)0.0);
HXLINE( 641)		Float currentLineDescent = ((Float)0.0);
HXLINE( 642)		 ::Dynamic currentLineLeading = null();
HXLINE( 643)		Float currentLineHeight = ((Float)0.0);
HXLINE( 644)		Float currentLineWidth = ((Float)0.0);
HXLINE( 645)		Float currentTextHeight = ((Float)0.0);
HXLINE( 647)		this->textWidth = (int)0;
HXLINE( 648)		this->textHeight = (int)0;
HXLINE( 649)		this->numLines = (int)1;
HXLINE( 650)		this->bottomScrollV = (int)0;
HXLINE( 651)		this->maxScrollH = (int)0;
HXLINE( 653)		{
HXLINE( 653)			int _g = (int)0;
HXDLIN( 653)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 653)			while((_g < _g1->get_length())){
HXLINE( 653)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 653)				_g = (_g + (int)1);
HXLINE( 655)				while(true){
HXLINE( 655)					int group1 = group->lineIndex;
HXDLIN( 655)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 655)						goto _hx_goto_8;
            					}
HXLINE( 657)					this->lineAscents->push(currentLineAscent);
HXLINE( 658)					this->lineDescents->push(currentLineDescent);
HXLINE( 659)					{
HXLINE( 659)						Float _hx_tmp;
HXDLIN( 659)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 659)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 659)							_hx_tmp = (int)0;
            						}
HXDLIN( 659)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 660)					this->lineHeights->push(currentLineHeight);
HXLINE( 661)					this->lineWidths->push(currentLineWidth);
HXLINE( 663)					currentLineAscent = (int)0;
HXLINE( 664)					currentLineDescent = (int)0;
HXLINE( 665)					currentLineLeading = null();
HXLINE( 666)					currentLineHeight = (int)0;
HXLINE( 667)					currentLineWidth = (int)0;
HXLINE( 669)					this->numLines++;
HXLINE( 671)					Float _hx_tmp1 = this->textHeight;
HXDLIN( 671)					if ((_hx_tmp1 <= (this->height - (int)2))) {
HXLINE( 673)						this->bottomScrollV++;
            					}
            				}
            				_hx_goto_8:;
HXLINE( 679)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 680)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 682)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 684)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 688)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 692)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 693)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 695)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 697)					this->textWidth = currentLineWidth;
            				}
HXLINE( 701)				currentTextHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
HXLINE( 703)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 705)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 711)		bool _hx_tmp2;
HXDLIN( 711)		bool _hx_tmp3;
HXDLIN( 711)		if ((this->textHeight == (int)0)) {
HXLINE( 711)			_hx_tmp3 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 711)			_hx_tmp3 = false;
            		}
HXDLIN( 711)		if (_hx_tmp3) {
HXLINE( 711)			_hx_tmp2 = hx::IsEq( this->textField->get_type(),(int)1 );
            		}
            		else {
HXLINE( 711)			_hx_tmp2 = false;
            		}
HXDLIN( 711)		if (_hx_tmp2) {
HXLINE( 713)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 714)			Float ascent;
HXDLIN( 714)			Float descent;
HXDLIN( 714)			 ::Dynamic leading;
HXDLIN( 714)			Float heightValue;
HXLINE( 738)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 740)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 742)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXLINE( 743)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE( 745)				if (hx::IsNotNull( font )) {
HXLINE( 747)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXLINE( 748)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE( 752)					ascent = currentFormat->size;
HXLINE( 753)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXLINE( 757)			leading = currentFormat->leading;
HXLINE( 759)			heightValue = ((ascent + descent) + leading);
HXLINE( 763)			currentLineAscent = ascent;
HXLINE( 764)			currentLineDescent = descent;
HXLINE( 765)			currentLineLeading = leading;
HXLINE( 767)			currentTextHeight = (ascent + descent);
HXLINE( 768)			this->textHeight = currentTextHeight;
            		}
HXLINE( 772)		this->lineAscents->push(currentLineAscent);
HXLINE( 773)		this->lineDescents->push(currentLineDescent);
HXLINE( 774)		{
HXLINE( 774)			Float _hx_tmp4;
HXDLIN( 774)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 774)				_hx_tmp4 = currentLineLeading;
            			}
            			else {
HXLINE( 774)				_hx_tmp4 = (int)0;
            			}
HXDLIN( 774)			this->lineLeadings->push(_hx_tmp4);
            		}
HXLINE( 775)		this->lineHeights->push(currentLineHeight);
HXLINE( 776)		this->lineWidths->push(currentLineWidth);
HXLINE( 778)		if ((this->numLines == (int)1)) {
HXLINE( 780)			this->bottomScrollV = (int)1;
HXLINE( 782)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 784)				 ::openfl::_internal::text::TextEngine _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 784)				_hx_tmp5->textHeight = (_hx_tmp5->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 788)			Float _hx_tmp6 = this->textHeight;
HXDLIN( 788)			if ((_hx_tmp6 <= (this->height - (int)2))) {
HXLINE( 790)				this->bottomScrollV++;
            			}
            		}
HXLINE( 794)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 796)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 796)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 800)				if (!(this->wordWrap)) {
HXLINE( 802)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 806)				this->height = (this->textHeight + (int)4);
HXLINE( 807)				this->bottomScrollV = this->numLines;
HXLINE( 798)				goto _hx_goto_9;
            			}
            			/* default */{
            			}
            			_hx_goto_9:;
            		}
HXLINE( 816)		Float _hx_tmp7 = this->textWidth;
HXDLIN( 816)		if ((_hx_tmp7 > (this->width - (int)4))) {
HXLINE( 818)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 822)			this->maxScrollH = (int)0;
            		}
HXLINE( 826)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
HXLINE( 828)		if ((this->scrollV > this->maxScrollV)) {
HXLINE( 828)			this->scrollV = this->maxScrollV;
            		}
HXLINE( 829)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 829)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_834_getLayoutGroups)
HXDLIN( 834)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 836)		this->layoutGroups->set_length((int)0);
HXLINE( 838)		bool _hx_tmp;
HXDLIN( 838)		if (hx::IsNotNull( this->text )) {
HXLINE( 838)			_hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 838)			_hx_tmp = true;
            		}
HXDLIN( 838)		if (_hx_tmp) {
HXLINE( 838)			return;
            		}
HXLINE( 840)		int rangeIndex = (int)-1;
HXLINE( 841)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 842)		 ::lime::text::Font font = null();
HXLINE( 844)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 846)		int leading = (int)0;
HXLINE( 847)		Float ascent = ((Float)0.0);
HXDLIN( 847)		Float maxAscent = ((Float)0.0);
HXLINE( 848)		Float descent = ((Float)0.0);
HXLINE( 850)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 850)		::Array< ::Dynamic> positions = null();
HXLINE( 851)		Float widthValue = ((Float)0.0);
HXDLIN( 851)		Float heightValue = ((Float)0.0);
HXDLIN( 851)		Float maxHeightValue = ((Float)0.0);
HXLINE( 853)		int previousSpaceIndex = (int)-2;
HXLINE( 854)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 855)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 857)		Float offsetX = ((Float)2.0);
HXLINE( 858)		Float offsetY = ((Float)2.0);
HXLINE( 859)		int textIndex = (int)0;
HXLINE( 860)		int lineIndex = (int)0;
HXLINE( 861)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1204)		{
HXLINE(1204)			if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1204)				rangeIndex = (rangeIndex + (int)1);
HXDLIN(1204)				formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1204)				currentFormat->_hx___merge(formatRange->format);
HXDLIN(1204)				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1204)				if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1204)					ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1204)					descent = (currentFormat->size * currentFormat->_hx___descent);
            				}
            				else {
HXLINE(1204)					if (hx::IsNotNull( font )) {
HXLINE(1204)						ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1204)						descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            					}
            					else {
HXLINE(1204)						ascent = currentFormat->size;
HXDLIN(1204)						descent = (currentFormat->size * ((Float)0.185));
            					}
            				}
HXDLIN(1204)				leading = currentFormat->leading;
HXDLIN(1204)				heightValue = ((ascent + descent) + leading);
            			}
HXDLIN(1204)			if ((heightValue > maxHeightValue)) {
HXLINE(1204)				maxHeightValue = heightValue;
            			}
HXDLIN(1204)			if ((ascent > maxAscent)) {
HXLINE(1204)				maxAscent = ascent;
            			}
            		}
HXLINE(1206)		lineFormat = formatRange->format;
HXLINE(1207)		bool wrap;
HXLINE(1208)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + (int)1);
HXLINE(1210)		while((textIndex < maxLoops)){
HXLINE(1212)			bool _hx_tmp1;
HXDLIN(1212)			bool _hx_tmp2;
HXDLIN(1212)			if ((breakIndex > (int)-1)) {
HXLINE(1212)				if ((spaceIndex != (int)-1)) {
HXLINE(1212)					_hx_tmp2 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1212)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1212)				_hx_tmp2 = false;
            			}
HXDLIN(1212)			if (_hx_tmp2) {
HXLINE(1212)				_hx_tmp1 = (formatRange->end >= breakIndex);
            			}
            			else {
HXLINE(1212)				_hx_tmp1 = false;
            			}
HXDLIN(1212)			if (_hx_tmp1) {
HXLINE(1215)				if ((textIndex <= breakIndex)) {
HXLINE(1217)					bool _hx_tmp3;
HXDLIN(1217)					bool _hx_tmp4;
HXDLIN(1217)					if (this->wordWrap) {
HXLINE(1217)						_hx_tmp4 = (previousSpaceIndex <= textIndex);
            					}
            					else {
HXLINE(1217)						_hx_tmp4 = false;
            					}
HXDLIN(1217)					if (_hx_tmp4) {
HXLINE(1217)						_hx_tmp3 = (this->width >= (int)4);
            					}
            					else {
HXLINE(1217)						_hx_tmp3 = false;
            					}
HXDLIN(1217)					if (_hx_tmp3) {
HXLINE(1219)						::String text = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,breakIndex);
HXDLIN(1219)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1219)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1219)						Float width = ((Float)0.0);
HXDLIN(1219)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1219)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1219)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1219)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1219)						_gthis->_hx___textLayout->set_text(text);
HXDLIN(1219)						{
HXLINE(1219)							int _g = (int)0;
HXDLIN(1219)							::Array< ::Dynamic> _g1 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1219)							while((_g < _g1->length)){
HXLINE(1219)								 ::lime::text::GlyphPosition position = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1219)								_g = (_g + (int)1);
HXDLIN(1219)								width = (width + position->advance->x);
            							}
            						}
HXDLIN(1219)						Float tempWidth = width;
HXDLIN(1219)						while(((offsetX + tempWidth) > (_gthis->width - (int)2))){
HXLINE(1219)							int i = (int)1;
HXDLIN(1219)							while(((textIndex + i) < (breakIndex + (int)1))){
HXLINE(1219)								::String text1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i);
HXDLIN(1219)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1219)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1219)								Float width1 = ((Float)0.0);
HXDLIN(1219)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1219)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1219)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1219)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1219)								_gthis->_hx___textLayout->set_text(text1);
HXDLIN(1219)								{
HXLINE(1219)									int _g2 = (int)0;
HXDLIN(1219)									::Array< ::Dynamic> _g11 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1219)									while((_g2 < _g11->length)){
HXLINE(1219)										 ::lime::text::GlyphPosition position1 = _g11->__get(_g2).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1219)										_g2 = (_g2 + (int)1);
HXDLIN(1219)										width1 = (width1 + position1->advance->x);
            									}
            								}
HXDLIN(1219)								tempWidth = width1;
HXDLIN(1219)								if (((offsetX + tempWidth) > (_gthis->width - (int)2))) {
HXLINE(1219)									i = (i - (int)1);
HXDLIN(1219)									goto _hx_goto_14;
            								}
HXDLIN(1219)								i = (i + (int)1);
            							}
            							_hx_goto_14:;
HXDLIN(1219)							bool _hx_tmp5;
HXDLIN(1219)							if ((i == (int)0)) {
HXLINE(1219)								_hx_tmp5 = (tempWidth > (_gthis->width - (int)4));
            							}
            							else {
HXLINE(1219)								_hx_tmp5 = false;
            							}
HXDLIN(1219)							if (_hx_tmp5) {
HXLINE(1219)								i = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            							}
HXDLIN(1219)							if ((i == (int)0)) {
HXLINE(1219)								offsetX = (int)2;
HXDLIN(1219)								offsetY = (offsetY + layoutGroup->height);
HXDLIN(1219)								lineIndex = (lineIndex + (int)1);
HXDLIN(1219)								goto _hx_goto_13;
            							}
            							else {
HXLINE(1219)								{
HXLINE(1219)									int endIndex = (textIndex + i);
HXDLIN(1219)									bool _hx_tmp6;
HXDLIN(1219)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1219)										_hx_tmp6 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1219)										_hx_tmp6 = true;
            									}
HXDLIN(1219)									if (_hx_tmp6) {
HXLINE(1219)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXDLIN(1219)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1219)										layoutGroup->format = formatRange->format;
HXDLIN(1219)										layoutGroup->startIndex = textIndex;
HXDLIN(1219)										layoutGroup->endIndex = endIndex;
            									}
            								}
HXDLIN(1219)								::String text2 = _gthis->text;
HXDLIN(1219)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1219)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1219)								Float width2 = ((Float)0.0);
HXDLIN(1219)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1219)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1219)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1219)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1219)								 ::lime::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1219)								_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,(textIndex + i)));
HXDLIN(1219)								layoutGroup->positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1219)								layoutGroup->offsetX = offsetX;
HXDLIN(1219)								layoutGroup->ascent = ascent;
HXDLIN(1219)								layoutGroup->descent = descent;
HXDLIN(1219)								layoutGroup->leading = leading;
HXDLIN(1219)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1219)								layoutGroup->offsetY = offsetY;
HXDLIN(1219)								::Array< ::Dynamic> positions1 = layoutGroup->positions;
HXDLIN(1219)								Float width3 = ((Float)0.0);
HXDLIN(1219)								{
HXLINE(1219)									int _g3 = (int)0;
HXDLIN(1219)									while((_g3 < positions1->length)){
HXLINE(1219)										 ::lime::text::GlyphPosition position2 = positions1->__get(_g3).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1219)										_g3 = (_g3 + (int)1);
HXDLIN(1219)										width3 = (width3 + position2->advance->x);
            									}
            								}
HXDLIN(1219)								layoutGroup->width = width3;
HXDLIN(1219)								layoutGroup->height = heightValue;
HXDLIN(1219)								layoutGroup = null();
HXDLIN(1219)								{
HXLINE(1219)									if ((ascent > maxAscent)) {
HXLINE(1219)										maxAscent = ascent;
            									}
HXDLIN(1219)									if ((heightValue > maxHeightValue)) {
HXLINE(1219)										maxHeightValue = heightValue;
            									}
HXDLIN(1219)									{
HXLINE(1219)										int _g4 = (int)0;
HXDLIN(1219)										 ::openfl::_Vector::ObjectVector _g12 = _gthis->layoutGroups;
HXDLIN(1219)										while((_g4 < _g12->get_length())){
HXLINE(1219)											 ::openfl::_internal::text::TextLayoutGroup lg = _g12->get(_g4).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1219)											_g4 = (_g4 + (int)1);
HXDLIN(1219)											if ((lg->lineIndex < lineIndex)) {
HXLINE(1219)												continue;
            											}
HXDLIN(1219)											if ((lg->lineIndex > lineIndex)) {
HXLINE(1219)												goto _hx_goto_17;
            											}
HXDLIN(1219)											lg->ascent = maxAscent;
HXDLIN(1219)											lg->height = maxHeightValue;
            										}
            										_hx_goto_17:;
            									}
HXDLIN(1219)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1219)									maxAscent = ((Float)0.0);
HXDLIN(1219)									maxHeightValue = ((Float)0.0);
HXDLIN(1219)									lineIndex = (lineIndex + (int)1);
HXDLIN(1219)									offsetX = (int)2;
            								}
HXDLIN(1219)								textIndex = (textIndex + i);
HXDLIN(1219)								::String text3 = _gthis->text;
HXDLIN(1219)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1219)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1219)								Float width4 = ((Float)0.0);
HXDLIN(1219)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1219)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1219)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1219)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1219)								 ::lime::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1219)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,textIndex,breakIndex));
HXDLIN(1219)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1219)								Float width5 = ((Float)0.0);
HXDLIN(1219)								{
HXLINE(1219)									int _g5 = (int)0;
HXDLIN(1219)									while((_g5 < positions->length)){
HXLINE(1219)										 ::lime::text::GlyphPosition position3 = positions->__get(_g5).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1219)										_g5 = (_g5 + (int)1);
HXDLIN(1219)										width5 = (width5 + position3->advance->x);
            									}
            								}
HXDLIN(1219)								widthValue = width5;
HXDLIN(1219)								tempWidth = widthValue;
            							}
            						}
            						_hx_goto_13:;
            					}
HXLINE(1223)					bool _hx_tmp7;
HXDLIN(1223)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1223)						_hx_tmp7 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1223)						_hx_tmp7 = true;
            					}
HXDLIN(1223)					if (_hx_tmp7) {
HXLINE(1223)						layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1223)						::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            					}
            					else {
HXLINE(1223)						layoutGroup->format = formatRange->format;
HXDLIN(1223)						layoutGroup->startIndex = textIndex;
HXDLIN(1223)						layoutGroup->endIndex = breakIndex;
            					}
HXLINE(1225)					::String text4 = this->text;
HXDLIN(1225)					if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1225)						_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            					}
HXDLIN(1225)					Float width6 = ((Float)0.0);
HXDLIN(1225)					_gthis->_hx___textLayout->set_text(null());
HXDLIN(1225)					_gthis->_hx___textLayout->set_font(font);
HXDLIN(1225)					if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1225)						_gthis->_hx___textLayout->set_size(formatRange->format->size);
            					}
HXDLIN(1225)					 ::lime::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1225)					_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,breakIndex));
HXDLIN(1225)					layoutGroup->positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1226)					layoutGroup->offsetX = offsetX;
HXLINE(1227)					layoutGroup->ascent = ascent;
HXLINE(1228)					layoutGroup->descent = descent;
HXLINE(1229)					layoutGroup->leading = leading;
HXLINE(1230)					layoutGroup->lineIndex = lineIndex;
HXLINE(1231)					layoutGroup->offsetY = offsetY;
HXLINE(1232)					::Array< ::Dynamic> positions2 = layoutGroup->positions;
HXDLIN(1232)					Float width7 = ((Float)0.0);
HXDLIN(1232)					{
HXLINE(1232)						int _g6 = (int)0;
HXDLIN(1232)						while((_g6 < positions2->length)){
HXLINE(1232)							 ::lime::text::GlyphPosition position4 = positions2->__get(_g6).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1232)							_g6 = (_g6 + (int)1);
HXDLIN(1232)							width7 = (width7 + position4->advance->x);
            						}
            					}
HXDLIN(1232)					layoutGroup->width = width7;
HXLINE(1233)					layoutGroup->height = heightValue;
HXLINE(1235)					layoutGroup = null();
            				}
            				else {
HXLINE(1237)					bool _hx_tmp8;
HXDLIN(1237)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1237)						_hx_tmp8 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1237)						_hx_tmp8 = false;
            					}
HXDLIN(1237)					if (_hx_tmp8) {
HXLINE(1240)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1242)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1242)							int index = (layoutGroup->positions->length - (int)1);
HXDLIN(1242)							Float _hx_tmp9;
HXDLIN(1242)							bool _hx_tmp10;
HXDLIN(1242)							if ((index >= (int)0)) {
HXLINE(1242)								_hx_tmp10 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1242)								_hx_tmp10 = false;
            							}
HXDLIN(1242)							if (_hx_tmp10) {
HXLINE(1242)								_hx_tmp9 = layoutGroup->positions->__get(index).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1242)								_hx_tmp9 = (int)0;
            							}
HXDLIN(1242)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp9);
            						}
HXLINE(1246)						layoutGroup = null();
            					}
            				}
HXLINE(1250)				if ((formatRange->end == breakIndex)) {
HXLINE(1252)					{
HXLINE(1252)						if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1252)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1252)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1252)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1252)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1252)							if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1252)								ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1252)								descent = (currentFormat->size * currentFormat->_hx___descent);
            							}
            							else {
HXLINE(1252)								if (hx::IsNotNull( font )) {
HXLINE(1252)									ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1252)									descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            								}
            								else {
HXLINE(1252)									ascent = currentFormat->size;
HXDLIN(1252)									descent = (currentFormat->size * ((Float)0.185));
            								}
            							}
HXDLIN(1252)							leading = currentFormat->leading;
HXDLIN(1252)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN(1252)						if ((heightValue > maxHeightValue)) {
HXLINE(1252)							maxHeightValue = heightValue;
            						}
HXDLIN(1252)						if ((ascent > maxAscent)) {
HXLINE(1252)							maxAscent = ascent;
            						}
            					}
HXLINE(1253)					lineFormat = formatRange->format;
            				}
HXLINE(1257)				if ((breakIndex >= (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - (int)1))) {
HXLINE(1260)					offsetY = (offsetY - maxHeightValue);
            				}
HXLINE(1264)				{
HXLINE(1264)					if ((ascent > maxAscent)) {
HXLINE(1264)						maxAscent = ascent;
            					}
HXDLIN(1264)					if ((heightValue > maxHeightValue)) {
HXLINE(1264)						maxHeightValue = heightValue;
            					}
HXDLIN(1264)					{
HXLINE(1264)						int _g7 = (int)0;
HXDLIN(1264)						 ::openfl::_Vector::ObjectVector _g13 = _gthis->layoutGroups;
HXDLIN(1264)						while((_g7 < _g13->get_length())){
HXLINE(1264)							 ::openfl::_internal::text::TextLayoutGroup lg1 = _g13->get(_g7).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1264)							_g7 = (_g7 + (int)1);
HXDLIN(1264)							if ((lg1->lineIndex < lineIndex)) {
HXLINE(1264)								continue;
            							}
HXDLIN(1264)							if ((lg1->lineIndex > lineIndex)) {
HXLINE(1264)								goto _hx_goto_20;
            							}
HXDLIN(1264)							lg1->ascent = maxAscent;
HXDLIN(1264)							lg1->height = maxHeightValue;
            						}
            						_hx_goto_20:;
            					}
HXDLIN(1264)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1264)					maxAscent = ((Float)0.0);
HXDLIN(1264)					maxHeightValue = ((Float)0.0);
HXDLIN(1264)					lineIndex = (lineIndex + (int)1);
HXDLIN(1264)					offsetX = (int)2;
            				}
HXLINE(1266)				textIndex = (breakIndex + (int)1);
HXLINE(1267)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1269)				bool _hx_tmp11;
HXDLIN(1269)				bool _hx_tmp12;
HXDLIN(1269)				if ((formatRange->end >= spaceIndex)) {
HXLINE(1269)					_hx_tmp12 = (spaceIndex > (int)-1);
            				}
            				else {
HXLINE(1269)					_hx_tmp12 = false;
            				}
HXDLIN(1269)				if (_hx_tmp12) {
HXLINE(1269)					_hx_tmp11 = (textIndex < formatRange->end);
            				}
            				else {
HXLINE(1269)					_hx_tmp11 = false;
            				}
HXDLIN(1269)				if (_hx_tmp11) {
HXLINE(1272)					bool _hx_tmp13;
HXDLIN(1272)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1272)						_hx_tmp13 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1272)						_hx_tmp13 = false;
            					}
HXDLIN(1272)					if (_hx_tmp13) {
HXLINE(1274)						layoutGroup = null();
            					}
HXLINE(1278)					wrap = false;
HXLINE(1280)					while((textIndex != formatRange->end)){
HXLINE(1284)						int endIndex1 = (int)-1;
HXLINE(1286)						if ((spaceIndex == (int)-1)) {
HXLINE(1288)							endIndex1 = breakIndex;
            						}
            						else {
HXLINE(1294)							endIndex1 = (spaceIndex + (int)1);
HXLINE(1296)							bool _hx_tmp14;
HXDLIN(1296)							if ((breakIndex > (int)-1)) {
HXLINE(1296)								_hx_tmp14 = (breakIndex < endIndex1);
            							}
            							else {
HXLINE(1296)								_hx_tmp14 = false;
            							}
HXDLIN(1296)							if (_hx_tmp14) {
HXLINE(1298)								endIndex1 = breakIndex;
            							}
            						}
HXLINE(1304)						bool _hx_tmp15;
HXDLIN(1304)						if ((endIndex1 != (int)-1)) {
HXLINE(1304)							_hx_tmp15 = (endIndex1 > formatRange->end);
            						}
            						else {
HXLINE(1304)							_hx_tmp15 = true;
            						}
HXDLIN(1304)						if (_hx_tmp15) {
HXLINE(1306)							endIndex1 = formatRange->end;
            						}
HXLINE(1310)						::String text5 = this->text;
HXDLIN(1310)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1310)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1310)						Float width8 = ((Float)0.0);
HXDLIN(1310)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1310)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1310)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1310)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1310)						 ::lime::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1310)						_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,textIndex,endIndex1));
HXDLIN(1310)						positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1311)						Float width9 = ((Float)0.0);
HXDLIN(1311)						{
HXLINE(1311)							int _g8 = (int)0;
HXDLIN(1311)							while((_g8 < positions->length)){
HXLINE(1311)								 ::lime::text::GlyphPosition position5 = positions->__get(_g8).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1311)								_g8 = (_g8 + (int)1);
HXDLIN(1311)								width9 = (width9 + position5->advance->x);
            							}
            						}
HXDLIN(1311)						widthValue = width9;
HXLINE(1313)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE(1315)							bool _hx_tmp16;
HXDLIN(1315)							if ((positions->length > (int)0)) {
HXLINE(1315)								_hx_tmp16 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1315)								_hx_tmp16 = false;
            							}
HXDLIN(1315)							if (_hx_tmp16) {
HXLINE(1318)								textIndex = (textIndex + (int)1);
HXLINE(1320)								Float spaceWidth = positions->shift().StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
HXLINE(1321)								widthValue = (widthValue - spaceWidth);
HXLINE(1322)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1326)							bool _hx_tmp17;
HXDLIN(1326)							if ((positions->length > (int)0)) {
HXLINE(1326)								_hx_tmp17 = (endIndex1 == (spaceIndex + (int)1));
            							}
            							else {
HXLINE(1326)								_hx_tmp17 = false;
            							}
HXDLIN(1326)							if (_hx_tmp17) {
HXLINE(1329)								endIndex1 = (endIndex1 - (int)1);
HXLINE(1331)								Float spaceWidth1 = positions->pop().StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
HXLINE(1332)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1338)						if (this->wordWrap) {
HXLINE(1340)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE(1342)								wrap = true;
HXLINE(1344)								bool _hx_tmp18;
HXDLIN(1344)								if ((positions->length > (int)0)) {
HXLINE(1344)									_hx_tmp18 = (endIndex1 == (spaceIndex + (int)1));
            								}
            								else {
HXLINE(1344)									_hx_tmp18 = false;
            								}
HXDLIN(1344)								if (_hx_tmp18) {
HXLINE(1349)									 ::lime::text::GlyphPosition lastPosition = positions->__get((positions->length - (int)1)).StaticCast<  ::lime::text::GlyphPosition >();
HXLINE(1350)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1352)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - (int)2))) {
HXLINE(1354)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1364)						if (wrap) {
HXLINE(1366)							bool _hx_tmp19;
HXDLIN(1366)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1366)								if (hx::IsNull( layoutGroup )) {
HXLINE(1366)									_hx_tmp19 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1366)									_hx_tmp19 = true;
            								}
            							}
            							else {
HXLINE(1366)								_hx_tmp19 = false;
            							}
HXDLIN(1366)							if (_hx_tmp19) {
HXLINE(1368)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1369)								if (hx::IsNull( previous )) {
HXLINE(1370)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1370)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1374)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1374)								int index1 = (previous->positions->length - (int)1);
HXDLIN(1374)								Float _hx_tmp20;
HXDLIN(1374)								bool _hx_tmp21;
HXDLIN(1374)								if ((index1 >= (int)0)) {
HXLINE(1374)									_hx_tmp21 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1374)									_hx_tmp21 = false;
            								}
HXDLIN(1374)								if (_hx_tmp21) {
HXLINE(1374)									_hx_tmp20 = previous->positions->__get(index1).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1374)									_hx_tmp20 = (int)0;
            								}
HXDLIN(1374)								previous1->width = (previous1->width - _hx_tmp20);
HXLINE(1375)								previous->endIndex--;
            							}
HXLINE(1379)							int i1 = (this->layoutGroups->get_length() - (int)1);
HXLINE(1380)							int offsetCount = (int)0;
HXLINE(1382)							while(true){
HXLINE(1384)								layoutGroup = this->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1386)								bool _hx_tmp22;
HXDLIN(1386)								if ((i1 > (int)0)) {
HXLINE(1386)									_hx_tmp22 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1386)									_hx_tmp22 = false;
            								}
HXDLIN(1386)								if (_hx_tmp22) {
HXLINE(1388)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1392)									goto _hx_goto_23;
            								}
HXLINE(1396)								i1 = (i1 - (int)1);
            							}
            							_hx_goto_23:;
HXLINE(1400)							if ((textIndex == (previousSpaceIndex + (int)1))) {
HXLINE(1402)								if ((ascent > maxAscent)) {
HXLINE(1402)									maxAscent = ascent;
            								}
HXDLIN(1402)								if ((heightValue > maxHeightValue)) {
HXLINE(1402)									maxHeightValue = heightValue;
            								}
HXDLIN(1402)								{
HXLINE(1402)									int _g9 = (int)0;
HXDLIN(1402)									 ::openfl::_Vector::ObjectVector _g14 = _gthis->layoutGroups;
HXDLIN(1402)									while((_g9 < _g14->get_length())){
HXLINE(1402)										 ::openfl::_internal::text::TextLayoutGroup lg2 = _g14->get(_g9).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1402)										_g9 = (_g9 + (int)1);
HXDLIN(1402)										if ((lg2->lineIndex < lineIndex)) {
HXLINE(1402)											continue;
            										}
HXDLIN(1402)										if ((lg2->lineIndex > lineIndex)) {
HXLINE(1402)											goto _hx_goto_24;
            										}
HXDLIN(1402)										lg2->ascent = maxAscent;
HXDLIN(1402)										lg2->height = maxHeightValue;
            									}
            									_hx_goto_24:;
            								}
HXDLIN(1402)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1402)								maxAscent = ((Float)0.0);
HXDLIN(1402)								maxHeightValue = ((Float)0.0);
HXDLIN(1402)								lineIndex = (lineIndex + (int)1);
HXDLIN(1402)								offsetX = (int)2;
            							}
HXLINE(1406)							offsetX = (int)2;
HXLINE(1408)							if ((offsetCount > (int)0)) {
HXLINE(1410)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1410)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1412)								{
HXLINE(1412)									int _g15 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1412)									int _g10 = this->layoutGroups->get_length();
HXDLIN(1412)									while((_g15 < _g10)){
HXLINE(1412)										_g15 = (_g15 + (int)1);
HXDLIN(1412)										int i2 = (_g15 - (int)1);
HXLINE(1414)										layoutGroup = this->layoutGroups->get(i2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1415)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1415)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1416)										layoutGroup->offsetY = offsetY;
HXLINE(1417)										layoutGroup->lineIndex = lineIndex;
HXLINE(1418)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1424)							if ((this->width >= (int)4)) {
HXLINE(1424)								::String text6 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,endIndex1);
HXDLIN(1424)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1424)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1424)								Float width10 = ((Float)0.0);
HXDLIN(1424)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1424)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1424)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1424)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1424)								_gthis->_hx___textLayout->set_text(text6);
HXDLIN(1424)								{
HXLINE(1424)									int _g16 = (int)0;
HXDLIN(1424)									::Array< ::Dynamic> _g17 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1424)									while((_g16 < _g17->length)){
HXLINE(1424)										 ::lime::text::GlyphPosition position6 = _g17->__get(_g16).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1424)										_g16 = (_g16 + (int)1);
HXDLIN(1424)										width10 = (width10 + position6->advance->x);
            									}
            								}
HXDLIN(1424)								Float tempWidth1 = width10;
HXDLIN(1424)								while(((offsetX + tempWidth1) > (_gthis->width - (int)2))){
HXLINE(1424)									int i3 = (int)1;
HXDLIN(1424)									while(((textIndex + i3) < (endIndex1 + (int)1))){
HXLINE(1424)										::String text7 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i3);
HXDLIN(1424)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1424)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1424)										Float width11 = ((Float)0.0);
HXDLIN(1424)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1424)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1424)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1424)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1424)										_gthis->_hx___textLayout->set_text(text7);
HXDLIN(1424)										{
HXLINE(1424)											int _g18 = (int)0;
HXDLIN(1424)											::Array< ::Dynamic> _g19 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1424)											while((_g18 < _g19->length)){
HXLINE(1424)												 ::lime::text::GlyphPosition position7 = _g19->__get(_g18).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1424)												_g18 = (_g18 + (int)1);
HXDLIN(1424)												width11 = (width11 + position7->advance->x);
            											}
            										}
HXDLIN(1424)										tempWidth1 = width11;
HXDLIN(1424)										if (((offsetX + tempWidth1) > (_gthis->width - (int)2))) {
HXLINE(1424)											i3 = (i3 - (int)1);
HXDLIN(1424)											goto _hx_goto_28;
            										}
HXDLIN(1424)										i3 = (i3 + (int)1);
            									}
            									_hx_goto_28:;
HXDLIN(1424)									bool _hx_tmp23;
HXDLIN(1424)									if ((i3 == (int)0)) {
HXLINE(1424)										_hx_tmp23 = (tempWidth1 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1424)										_hx_tmp23 = false;
            									}
HXDLIN(1424)									if (_hx_tmp23) {
HXLINE(1424)										i3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            									}
HXDLIN(1424)									if ((i3 == (int)0)) {
HXLINE(1424)										offsetX = (int)2;
HXDLIN(1424)										offsetY = (offsetY + layoutGroup->height);
HXDLIN(1424)										lineIndex = (lineIndex + (int)1);
HXDLIN(1424)										goto _hx_goto_27;
            									}
            									else {
HXLINE(1424)										{
HXLINE(1424)											int endIndex2 = (textIndex + i3);
HXDLIN(1424)											bool _hx_tmp24;
HXDLIN(1424)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1424)												_hx_tmp24 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1424)												_hx_tmp24 = true;
            											}
HXDLIN(1424)											if (_hx_tmp24) {
HXLINE(1424)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1424)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1424)												layoutGroup->format = formatRange->format;
HXDLIN(1424)												layoutGroup->startIndex = textIndex;
HXDLIN(1424)												layoutGroup->endIndex = endIndex2;
            											}
            										}
HXDLIN(1424)										::String text8 = _gthis->text;
HXDLIN(1424)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1424)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1424)										Float width12 = ((Float)0.0);
HXDLIN(1424)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1424)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1424)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1424)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1424)										 ::lime::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1424)										_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,textIndex,(textIndex + i3)));
HXDLIN(1424)										layoutGroup->positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1424)										layoutGroup->offsetX = offsetX;
HXDLIN(1424)										layoutGroup->ascent = ascent;
HXDLIN(1424)										layoutGroup->descent = descent;
HXDLIN(1424)										layoutGroup->leading = leading;
HXDLIN(1424)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1424)										layoutGroup->offsetY = offsetY;
HXDLIN(1424)										::Array< ::Dynamic> positions3 = layoutGroup->positions;
HXDLIN(1424)										Float width13 = ((Float)0.0);
HXDLIN(1424)										{
HXLINE(1424)											int _g20 = (int)0;
HXDLIN(1424)											while((_g20 < positions3->length)){
HXLINE(1424)												 ::lime::text::GlyphPosition position8 = positions3->__get(_g20).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1424)												_g20 = (_g20 + (int)1);
HXDLIN(1424)												width13 = (width13 + position8->advance->x);
            											}
            										}
HXDLIN(1424)										layoutGroup->width = width13;
HXDLIN(1424)										layoutGroup->height = heightValue;
HXDLIN(1424)										layoutGroup = null();
HXDLIN(1424)										{
HXLINE(1424)											if ((ascent > maxAscent)) {
HXLINE(1424)												maxAscent = ascent;
            											}
HXDLIN(1424)											if ((heightValue > maxHeightValue)) {
HXLINE(1424)												maxHeightValue = heightValue;
            											}
HXDLIN(1424)											{
HXLINE(1424)												int _g21 = (int)0;
HXDLIN(1424)												 ::openfl::_Vector::ObjectVector _g110 = _gthis->layoutGroups;
HXDLIN(1424)												while((_g21 < _g110->get_length())){
HXLINE(1424)													 ::openfl::_internal::text::TextLayoutGroup lg3 = _g110->get(_g21).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1424)													_g21 = (_g21 + (int)1);
HXDLIN(1424)													if ((lg3->lineIndex < lineIndex)) {
HXLINE(1424)														continue;
            													}
HXDLIN(1424)													if ((lg3->lineIndex > lineIndex)) {
HXLINE(1424)														goto _hx_goto_31;
            													}
HXDLIN(1424)													lg3->ascent = maxAscent;
HXDLIN(1424)													lg3->height = maxHeightValue;
            												}
            												_hx_goto_31:;
            											}
HXDLIN(1424)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1424)											maxAscent = ((Float)0.0);
HXDLIN(1424)											maxHeightValue = ((Float)0.0);
HXDLIN(1424)											lineIndex = (lineIndex + (int)1);
HXDLIN(1424)											offsetX = (int)2;
            										}
HXDLIN(1424)										textIndex = (textIndex + i3);
HXDLIN(1424)										::String text9 = _gthis->text;
HXDLIN(1424)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1424)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1424)										Float width14 = ((Float)0.0);
HXDLIN(1424)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1424)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1424)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1424)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1424)										 ::lime::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1424)										_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,textIndex,endIndex1));
HXDLIN(1424)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1424)										Float width15 = ((Float)0.0);
HXDLIN(1424)										{
HXLINE(1424)											int _g22 = (int)0;
HXDLIN(1424)											while((_g22 < positions->length)){
HXLINE(1424)												 ::lime::text::GlyphPosition position9 = positions->__get(_g22).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1424)												_g22 = (_g22 + (int)1);
HXDLIN(1424)												width15 = (width15 + position9->advance->x);
            											}
            										}
HXDLIN(1424)										widthValue = width15;
HXDLIN(1424)										tempWidth1 = widthValue;
            									}
            								}
            								_hx_goto_27:;
            							}
HXLINE(1426)							bool _hx_tmp25;
HXDLIN(1426)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1426)								_hx_tmp25 = (layoutGroup->startIndex != layoutGroup->endIndex);
            							}
            							else {
HXLINE(1426)								_hx_tmp25 = true;
            							}
HXDLIN(1426)							if (_hx_tmp25) {
HXLINE(1426)								layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1426)								::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            							}
            							else {
HXLINE(1426)								layoutGroup->format = formatRange->format;
HXDLIN(1426)								layoutGroup->startIndex = textIndex;
HXDLIN(1426)								layoutGroup->endIndex = endIndex1;
            							}
HXLINE(1428)							layoutGroup->positions = positions;
HXLINE(1429)							layoutGroup->offsetX = offsetX;
HXLINE(1430)							layoutGroup->ascent = ascent;
HXLINE(1431)							layoutGroup->descent = descent;
HXLINE(1432)							layoutGroup->leading = leading;
HXLINE(1433)							layoutGroup->lineIndex = lineIndex;
HXLINE(1434)							layoutGroup->offsetY = offsetY;
HXLINE(1435)							layoutGroup->width = widthValue;
HXLINE(1436)							layoutGroup->height = heightValue;
HXLINE(1438)							offsetX = (offsetX + widthValue);
HXLINE(1440)							textIndex = endIndex1;
HXLINE(1442)							wrap = false;
            						}
            						else {
HXLINE(1446)							bool _hx_tmp26;
HXDLIN(1446)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1446)								_hx_tmp26 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1446)								_hx_tmp26 = false;
            							}
HXDLIN(1446)							if (_hx_tmp26) {
HXLINE(1448)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1450)									layoutGroup->endIndex = spaceIndex;
HXLINE(1451)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1452)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1452)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
            							}
            							else {
HXLINE(1456)								bool _hx_tmp27;
HXDLIN(1456)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1456)									_hx_tmp27 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1456)									_hx_tmp27 = true;
            								}
HXDLIN(1456)								if (_hx_tmp27) {
HXLINE(1458)									bool _hx_tmp28;
HXDLIN(1458)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1458)										_hx_tmp28 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1458)										_hx_tmp28 = true;
            									}
HXDLIN(1458)									if (_hx_tmp28) {
HXLINE(1458)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1458)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1458)										layoutGroup->format = formatRange->format;
HXDLIN(1458)										layoutGroup->startIndex = textIndex;
HXDLIN(1458)										layoutGroup->endIndex = endIndex1;
            									}
HXLINE(1460)									layoutGroup->positions = positions;
HXLINE(1461)									layoutGroup->offsetX = offsetX;
HXLINE(1462)									layoutGroup->ascent = ascent;
HXLINE(1463)									layoutGroup->descent = descent;
HXLINE(1464)									layoutGroup->leading = leading;
HXLINE(1465)									layoutGroup->lineIndex = lineIndex;
HXLINE(1466)									layoutGroup->offsetY = offsetY;
HXLINE(1467)									layoutGroup->width = widthValue;
HXLINE(1468)									layoutGroup->height = heightValue;
            								}
            								else {
HXLINE(1472)									layoutGroup->endIndex = endIndex1;
HXLINE(1473)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1474)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1474)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1477)									if ((breakIndex == endIndex1)) {
HXLINE(1477)										endIndex1 = (endIndex1 + (int)1);
            									}
            								}
            							}
HXLINE(1481)							offsetX = (offsetX + widthValue);
HXLINE(1483)							textIndex = endIndex1;
            						}
HXLINE(1487)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1489)						if ((formatRange->end <= previousSpaceIndex)) {
HXLINE(1491)							layoutGroup = null();
HXLINE(1492)							textIndex = formatRange->end;
HXLINE(1493)							{
HXLINE(1493)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1493)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1493)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1493)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1493)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1493)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1493)										ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1493)										descent = (currentFormat->size * currentFormat->_hx___descent);
            									}
            									else {
HXLINE(1493)										if (hx::IsNotNull( font )) {
HXLINE(1493)											ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1493)											descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            										}
            										else {
HXLINE(1493)											ascent = currentFormat->size;
HXDLIN(1493)											descent = (currentFormat->size * ((Float)0.185));
            										}
            									}
HXDLIN(1493)									leading = currentFormat->leading;
HXDLIN(1493)									heightValue = ((ascent + descent) + leading);
            								}
HXDLIN(1493)								if ((heightValue > maxHeightValue)) {
HXLINE(1493)									maxHeightValue = heightValue;
            								}
HXDLIN(1493)								if ((ascent > maxAscent)) {
HXLINE(1493)									maxAscent = ascent;
            								}
            							}
            						}
            						else {
HXLINE(1500)							if ((breakIndex == previousSpaceIndex)) {
HXLINE(1502)								layoutGroup->endIndex = breakIndex;
HXLINE(1504)								if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < (int)0)) {
HXLINE(1507)									layoutGroup->positions->push(null());
            								}
HXLINE(1511)								textIndex = (breakIndex + (int)1);
            							}
HXLINE(1515)							previousSpaceIndex = spaceIndex;
HXLINE(1516)							spaceIndex = nextSpaceIndex;
            						}
HXLINE(1520)						bool _hx_tmp29;
HXDLIN(1520)						bool _hx_tmp30;
HXDLIN(1520)						bool _hx_tmp31;
HXDLIN(1520)						bool _hx_tmp32;
HXDLIN(1520)						if ((breakIndex > (int)-1)) {
HXLINE(1520)							_hx_tmp32 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1520)							_hx_tmp32 = false;
            						}
HXDLIN(1520)						if (_hx_tmp32) {
HXLINE(1520)							if ((spaceIndex <= breakIndex)) {
HXLINE(1520)								_hx_tmp31 = (spaceIndex == (int)-1);
            							}
            							else {
HXLINE(1520)								_hx_tmp31 = true;
            							}
            						}
            						else {
HXLINE(1520)							_hx_tmp31 = false;
            						}
HXDLIN(1520)						if (!(_hx_tmp31)) {
HXLINE(1520)							_hx_tmp30 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1520)							_hx_tmp30 = true;
            						}
HXDLIN(1520)						if (!(_hx_tmp30)) {
HXLINE(1520)							_hx_tmp29 = (spaceIndex > formatRange->end);
            						}
            						else {
HXLINE(1520)							_hx_tmp29 = true;
            						}
HXDLIN(1520)						if (_hx_tmp29) {
HXLINE(1522)							goto _hx_goto_21;
            						}
            					}
            					_hx_goto_21:;
            				}
            				else {
HXLINE(1531)					if ((textIndex > formatRange->end)) {
HXLINE(1533)						goto _hx_goto_11;
            					}
            					else {
HXLINE(1535)						bool _hx_tmp33;
HXDLIN(1535)						if ((textIndex >= formatRange->end)) {
HXLINE(1535)							_hx_tmp33 = (textIndex == ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1535)							_hx_tmp33 = true;
            						}
HXDLIN(1535)						if (_hx_tmp33) {
HXLINE(1537)							bool _hx_tmp34;
HXDLIN(1537)							if (this->wordWrap) {
HXLINE(1537)								_hx_tmp34 = (this->width >= (int)4);
            							}
            							else {
HXLINE(1537)								_hx_tmp34 = false;
            							}
HXDLIN(1537)							if (_hx_tmp34) {
HXLINE(1539)								int endIndex3 = formatRange->end;
HXDLIN(1539)								::String text10 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,endIndex3);
HXDLIN(1539)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1539)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1539)								Float width16 = ((Float)0.0);
HXDLIN(1539)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1539)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1539)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1539)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1539)								_gthis->_hx___textLayout->set_text(text10);
HXDLIN(1539)								{
HXLINE(1539)									int _g23 = (int)0;
HXDLIN(1539)									::Array< ::Dynamic> _g111 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1539)									while((_g23 < _g111->length)){
HXLINE(1539)										 ::lime::text::GlyphPosition position10 = _g111->__get(_g23).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1539)										_g23 = (_g23 + (int)1);
HXDLIN(1539)										width16 = (width16 + position10->advance->x);
            									}
            								}
HXDLIN(1539)								Float tempWidth2 = width16;
HXDLIN(1539)								while(((offsetX + tempWidth2) > (_gthis->width - (int)2))){
HXLINE(1539)									int i4 = (int)1;
HXDLIN(1539)									while(((textIndex + i4) < (endIndex3 + (int)1))){
HXLINE(1539)										::String text11 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i4);
HXDLIN(1539)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1539)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1539)										Float width17 = ((Float)0.0);
HXDLIN(1539)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1539)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1539)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1539)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1539)										_gthis->_hx___textLayout->set_text(text11);
HXDLIN(1539)										{
HXLINE(1539)											int _g24 = (int)0;
HXDLIN(1539)											::Array< ::Dynamic> _g112 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1539)											while((_g24 < _g112->length)){
HXLINE(1539)												 ::lime::text::GlyphPosition position11 = _g112->__get(_g24).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1539)												_g24 = (_g24 + (int)1);
HXDLIN(1539)												width17 = (width17 + position11->advance->x);
            											}
            										}
HXDLIN(1539)										tempWidth2 = width17;
HXDLIN(1539)										if (((offsetX + tempWidth2) > (_gthis->width - (int)2))) {
HXLINE(1539)											i4 = (i4 - (int)1);
HXDLIN(1539)											goto _hx_goto_35;
            										}
HXDLIN(1539)										i4 = (i4 + (int)1);
            									}
            									_hx_goto_35:;
HXDLIN(1539)									bool _hx_tmp35;
HXDLIN(1539)									if ((i4 == (int)0)) {
HXLINE(1539)										_hx_tmp35 = (tempWidth2 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1539)										_hx_tmp35 = false;
            									}
HXDLIN(1539)									if (_hx_tmp35) {
HXLINE(1539)										i4 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            									}
HXDLIN(1539)									if ((i4 == (int)0)) {
HXLINE(1539)										offsetX = (int)2;
HXDLIN(1539)										offsetY = (offsetY + layoutGroup->height);
HXDLIN(1539)										lineIndex = (lineIndex + (int)1);
HXDLIN(1539)										goto _hx_goto_34;
            									}
            									else {
HXLINE(1539)										{
HXLINE(1539)											int endIndex4 = (textIndex + i4);
HXDLIN(1539)											bool _hx_tmp36;
HXDLIN(1539)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1539)												_hx_tmp36 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1539)												_hx_tmp36 = true;
            											}
HXDLIN(1539)											if (_hx_tmp36) {
HXLINE(1539)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex4);
HXDLIN(1539)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1539)												layoutGroup->format = formatRange->format;
HXDLIN(1539)												layoutGroup->startIndex = textIndex;
HXDLIN(1539)												layoutGroup->endIndex = endIndex4;
            											}
            										}
HXDLIN(1539)										::String text12 = _gthis->text;
HXDLIN(1539)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1539)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1539)										Float width18 = ((Float)0.0);
HXDLIN(1539)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1539)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1539)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1539)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1539)										 ::lime::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1539)										_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,(textIndex + i4)));
HXDLIN(1539)										layoutGroup->positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1539)										layoutGroup->offsetX = offsetX;
HXDLIN(1539)										layoutGroup->ascent = ascent;
HXDLIN(1539)										layoutGroup->descent = descent;
HXDLIN(1539)										layoutGroup->leading = leading;
HXDLIN(1539)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1539)										layoutGroup->offsetY = offsetY;
HXDLIN(1539)										::Array< ::Dynamic> positions4 = layoutGroup->positions;
HXDLIN(1539)										Float width19 = ((Float)0.0);
HXDLIN(1539)										{
HXLINE(1539)											int _g25 = (int)0;
HXDLIN(1539)											while((_g25 < positions4->length)){
HXLINE(1539)												 ::lime::text::GlyphPosition position12 = positions4->__get(_g25).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1539)												_g25 = (_g25 + (int)1);
HXDLIN(1539)												width19 = (width19 + position12->advance->x);
            											}
            										}
HXDLIN(1539)										layoutGroup->width = width19;
HXDLIN(1539)										layoutGroup->height = heightValue;
HXDLIN(1539)										layoutGroup = null();
HXDLIN(1539)										{
HXLINE(1539)											if ((ascent > maxAscent)) {
HXLINE(1539)												maxAscent = ascent;
            											}
HXDLIN(1539)											if ((heightValue > maxHeightValue)) {
HXLINE(1539)												maxHeightValue = heightValue;
            											}
HXDLIN(1539)											{
HXLINE(1539)												int _g26 = (int)0;
HXDLIN(1539)												 ::openfl::_Vector::ObjectVector _g113 = _gthis->layoutGroups;
HXDLIN(1539)												while((_g26 < _g113->get_length())){
HXLINE(1539)													 ::openfl::_internal::text::TextLayoutGroup lg4 = _g113->get(_g26).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1539)													_g26 = (_g26 + (int)1);
HXDLIN(1539)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1539)														continue;
            													}
HXDLIN(1539)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1539)														goto _hx_goto_38;
            													}
HXDLIN(1539)													lg4->ascent = maxAscent;
HXDLIN(1539)													lg4->height = maxHeightValue;
            												}
            												_hx_goto_38:;
            											}
HXDLIN(1539)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1539)											maxAscent = ((Float)0.0);
HXDLIN(1539)											maxHeightValue = ((Float)0.0);
HXDLIN(1539)											lineIndex = (lineIndex + (int)1);
HXDLIN(1539)											offsetX = (int)2;
            										}
HXDLIN(1539)										textIndex = (textIndex + i4);
HXDLIN(1539)										::String text13 = _gthis->text;
HXDLIN(1539)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1539)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1539)										Float width20 = ((Float)0.0);
HXDLIN(1539)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1539)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1539)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1539)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1539)										 ::lime::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1539)										_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,textIndex,endIndex3));
HXDLIN(1539)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1539)										Float width21 = ((Float)0.0);
HXDLIN(1539)										{
HXLINE(1539)											int _g27 = (int)0;
HXDLIN(1539)											while((_g27 < positions->length)){
HXLINE(1539)												 ::lime::text::GlyphPosition position13 = positions->__get(_g27).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1539)												_g27 = (_g27 + (int)1);
HXDLIN(1539)												width21 = (width21 + position13->advance->x);
            											}
            										}
HXDLIN(1539)										widthValue = width21;
HXDLIN(1539)										tempWidth2 = widthValue;
            									}
            								}
            								_hx_goto_34:;
            							}
HXLINE(1543)							::String text14 = this->text;
HXDLIN(1543)							int endIndex5 = formatRange->end;
HXDLIN(1543)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1543)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1543)							Float width22 = ((Float)0.0);
HXDLIN(1543)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1543)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1543)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1543)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1543)							 ::lime::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1543)							_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,endIndex5));
HXDLIN(1543)							positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1544)							Float width23 = ((Float)0.0);
HXDLIN(1544)							{
HXLINE(1544)								int _g28 = (int)0;
HXDLIN(1544)								while((_g28 < positions->length)){
HXLINE(1544)									 ::lime::text::GlyphPosition position14 = positions->__get(_g28).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1544)									_g28 = (_g28 + (int)1);
HXDLIN(1544)									width23 = (width23 + position14->advance->x);
            								}
            							}
HXDLIN(1544)							widthValue = width23;
HXLINE(1546)							{
HXLINE(1546)								int endIndex6 = formatRange->end;
HXDLIN(1546)								bool _hx_tmp37;
HXDLIN(1546)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1546)									_hx_tmp37 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1546)									_hx_tmp37 = true;
            								}
HXDLIN(1546)								if (_hx_tmp37) {
HXLINE(1546)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex6);
HXDLIN(1546)									::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            								}
            								else {
HXLINE(1546)									layoutGroup->format = formatRange->format;
HXDLIN(1546)									layoutGroup->startIndex = textIndex;
HXDLIN(1546)									layoutGroup->endIndex = endIndex6;
            								}
            							}
HXLINE(1548)							::String text15 = this->text;
HXDLIN(1548)							int endIndex7 = formatRange->end;
HXDLIN(1548)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1548)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1548)							Float width24 = ((Float)0.0);
HXDLIN(1548)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1548)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1548)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1548)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1548)							 ::lime::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1548)							_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,textIndex,endIndex7));
HXDLIN(1548)							layoutGroup->positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1549)							layoutGroup->offsetX = offsetX;
HXLINE(1550)							layoutGroup->ascent = ascent;
HXLINE(1551)							layoutGroup->descent = descent;
HXLINE(1552)							layoutGroup->leading = leading;
HXLINE(1553)							layoutGroup->lineIndex = lineIndex;
HXLINE(1554)							layoutGroup->offsetY = offsetY;
HXLINE(1555)							::Array< ::Dynamic> positions5 = layoutGroup->positions;
HXDLIN(1555)							Float width25 = ((Float)0.0);
HXDLIN(1555)							{
HXLINE(1555)								int _g29 = (int)0;
HXDLIN(1555)								while((_g29 < positions5->length)){
HXLINE(1555)									 ::lime::text::GlyphPosition position15 = positions5->__get(_g29).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1555)									_g29 = (_g29 + (int)1);
HXDLIN(1555)									width25 = (width25 + position15->advance->x);
            								}
            							}
HXDLIN(1555)							layoutGroup->width = width25;
HXLINE(1556)							layoutGroup->height = heightValue;
HXLINE(1558)							offsetX = (offsetX + widthValue);
HXLINE(1559)							textIndex = formatRange->end;
            						}
            					}
HXLINE(1563)					{
HXLINE(1563)						if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1563)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1563)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1563)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)							if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)								ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1563)								descent = (currentFormat->size * currentFormat->_hx___descent);
            							}
            							else {
HXLINE(1563)								if (hx::IsNotNull( font )) {
HXLINE(1563)									ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1563)									descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            								}
            								else {
HXLINE(1563)									ascent = currentFormat->size;
HXDLIN(1563)									descent = (currentFormat->size * ((Float)0.185));
            								}
            							}
HXDLIN(1563)							leading = currentFormat->leading;
HXDLIN(1563)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN(1563)						if ((heightValue > maxHeightValue)) {
HXLINE(1563)							maxHeightValue = heightValue;
            						}
HXDLIN(1563)						if ((ascent > maxAscent)) {
HXLINE(1563)							maxAscent = ascent;
            						}
            					}
HXLINE(1565)					if ((textIndex == formatRange->end)) {
HXLINE(1567)						{
HXLINE(1567)							if ((ascent > maxAscent)) {
HXLINE(1567)								maxAscent = ascent;
            							}
HXDLIN(1567)							if ((heightValue > maxHeightValue)) {
HXLINE(1567)								maxHeightValue = heightValue;
            							}
HXDLIN(1567)							{
HXLINE(1567)								int _g30 = (int)0;
HXDLIN(1567)								 ::openfl::_Vector::ObjectVector _g114 = _gthis->layoutGroups;
HXDLIN(1567)								while((_g30 < _g114->get_length())){
HXLINE(1567)									 ::openfl::_internal::text::TextLayoutGroup lg5 = _g114->get(_g30).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1567)									_g30 = (_g30 + (int)1);
HXDLIN(1567)									if ((lg5->lineIndex < lineIndex)) {
HXLINE(1567)										continue;
            									}
HXDLIN(1567)									if ((lg5->lineIndex > lineIndex)) {
HXLINE(1567)										goto _hx_goto_42;
            									}
HXDLIN(1567)									lg5->ascent = maxAscent;
HXDLIN(1567)									lg5->height = maxHeightValue;
            								}
            								_hx_goto_42:;
            							}
HXDLIN(1567)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1567)							maxAscent = ((Float)0.0);
HXDLIN(1567)							maxHeightValue = ((Float)0.0);
HXDLIN(1567)							lineIndex = (lineIndex + (int)1);
HXDLIN(1567)							offsetX = (int)2;
            						}
HXLINE(1569)						textIndex = (textIndex + (int)1);
HXLINE(1570)						goto _hx_goto_11;
            					}
            				}
            			}
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1587_restrictText)
HXLINE(1589)		if (hx::IsNull( value )) {
HXLINE(1591)			return value;
            		}
HXLINE(1595)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1597)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1607)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1612_setTextAlignment)
HXLINE(1614)		int lineIndex = (int)-1;
HXLINE(1615)		Float offsetX = ((Float)0.0);
HXLINE(1616)		Float totalWidth = (this->width - (int)4);
HXLINE(1617)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1617)		int lineLength;
HXLINE(1619)		{
HXLINE(1619)			int _g1 = (int)0;
HXDLIN(1619)			int _g = this->layoutGroups->get_length();
HXDLIN(1619)			while((_g1 < _g)){
HXLINE(1619)				_g1 = (_g1 + (int)1);
HXDLIN(1619)				int i = (_g1 - (int)1);
HXLINE(1621)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1623)				if ((group->lineIndex != lineIndex)) {
HXLINE(1625)					lineIndex = group->lineIndex;
HXLINE(1627)					{
HXLINE(1627)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1627)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1631)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1633)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1637)								offsetX = (int)0;
            							}
HXLINE(1631)							goto _hx_goto_46;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1655)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1657)								lineLength = (int)1;
HXLINE(1659)								{
HXLINE(1659)									int _g3 = (i + (int)1);
HXDLIN(1659)									int _g21 = ::openfl::_Vector::IVector_obj::get_length(this->layoutGroups);
HXDLIN(1659)									while((_g3 < _g21)){
HXLINE(1659)										_g3 = (_g3 + (int)1);
HXDLIN(1659)										int j = (_g3 - (int)1);
HXLINE(1661)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1663)											bool _hx_tmp;
HXDLIN(1663)											if ((j != (int)0)) {
HXLINE(1663)												::String _hx_tmp1 = this->text;
HXDLIN(1663)												_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1663)												_hx_tmp = true;
            											}
HXDLIN(1663)											if (_hx_tmp) {
HXLINE(1665)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1671)											goto _hx_goto_47;
            										}
            									}
            									_hx_goto_47:;
            								}
HXLINE(1677)								if ((lineLength > (int)1)) {
HXLINE(1679)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1681)									 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1682)									bool _hx_tmp2;
HXDLIN(1682)									bool _hx_tmp3;
HXDLIN(1682)									int group1 = group->endIndex;
HXDLIN(1682)									if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1682)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1682)										_hx_tmp3 = false;
            									}
HXDLIN(1682)									if (_hx_tmp3) {
HXLINE(1682)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1682)										_hx_tmp2 = false;
            									}
HXDLIN(1682)									if (_hx_tmp2) {
HXLINE(1684)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1684)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1686)										int j1 = (int)0;
HXLINE(1687)										while(true){
HXLINE(1689)											bool _hx_tmp4;
HXDLIN(1689)											if ((j1 > (int)1)) {
HXLINE(1689)												::String _hx_tmp5 = this->text;
HXDLIN(1689)												_hx_tmp4 = hx::IsNotEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp5,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j1)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1689)												_hx_tmp4 = false;
            											}
HXDLIN(1689)											if (_hx_tmp4) {
HXLINE(1691)												 ::openfl::_internal::text::TextLayoutGroup _hx_tmp6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1691)												_hx_tmp6->offsetX = (_hx_tmp6->offsetX + (offsetX * (j1 - (int)1)));
HXLINE(1692)												j1 = (j1 + (int)1);
            											}
HXLINE(1696)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp7 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1696)											_hx_tmp7->offsetX = (_hx_tmp7->offsetX + (offsetX * j1));
HXLINE(1698)											j1 = (j1 + (int)1);
HXLINE(1687)											if (!((j1 < lineLength))) {
HXLINE(1687)												goto _hx_goto_48;
            											}
            										}
            										_hx_goto_48:;
            									}
            								}
            							}
HXLINE(1706)							offsetX = (int)0;
HXLINE(1653)							goto _hx_goto_46;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1643)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1645)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1649)								offsetX = (int)0;
            							}
HXLINE(1643)							goto _hx_goto_46;
            						}
            						/* default */{
HXLINE(1710)							offsetX = (int)0;
            						}
            						_hx_goto_46:;
            					}
            				}
HXLINE(1716)				if ((offsetX > (int)0)) {
HXLINE(1718)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1718)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1727_trimText)
HXLINE(1729)		if (hx::IsNull( value )) {
HXLINE(1731)			return value;
            		}
HXLINE(1735)		bool _hx_tmp;
HXDLIN(1735)		if ((this->maxChars > (int)0)) {
HXLINE(1735)			int _hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value);
HXDLIN(1735)			_hx_tmp = (_hx_tmp1 > this->maxChars);
            		}
            		else {
HXLINE(1735)			_hx_tmp = false;
            		}
HXDLIN(1735)		if (_hx_tmp) {
HXLINE(1737)			value = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(value,(int)0,this->maxChars);
            		}
HXLINE(1741)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1746_update)
HXLINE(1748)		bool _hx_tmp;
HXDLIN(1748)		if (hx::IsNotNull( this->text )) {
HXLINE(1748)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1748)			_hx_tmp = true;
            		}
HXDLIN(1748)		if (_hx_tmp) {
HXLINE(1750)			this->lineAscents->set_length((int)0);
HXLINE(1751)			this->lineBreaks->set_length((int)0);
HXLINE(1752)			this->lineDescents->set_length((int)0);
HXLINE(1753)			this->lineLeadings->set_length((int)0);
HXLINE(1754)			this->lineHeights->set_length((int)0);
HXLINE(1755)			this->lineWidths->set_length((int)0);
HXLINE(1756)			this->layoutGroups->set_length((int)0);
HXLINE(1758)			this->textWidth = (int)0;
HXLINE(1759)			this->textHeight = (int)0;
HXLINE(1760)			this->numLines = (int)1;
HXLINE(1761)			this->maxScrollH = (int)0;
HXLINE(1762)			this->maxScrollV = (int)1;
HXLINE(1763)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1767)			this->getLayoutGroups();
HXLINE(1768)			this->getLineMeasurements();
HXLINE(1769)			this->setTextAlignment();
            		}
HXLINE(1773)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1784_set_restrict)
HXLINE(1786)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1788)			return this->restrict;
            		}
HXLINE(1792)		this->restrict = value;
HXLINE(1794)		bool _hx_tmp;
HXDLIN(1794)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1794)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == (int)0);
            		}
            		else {
HXLINE(1794)			_hx_tmp = true;
            		}
HXDLIN(1794)		if (_hx_tmp) {
HXLINE(1796)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1800)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1804)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1811_set_text)
HXDLIN(1811)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_195_findFont)
HXLINE( 199)		{
HXLINE( 199)			int _g = (int)0;
HXDLIN( 199)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 199)			while((_g < _g1->length)){
HXLINE( 199)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 199)				_g = (_g + (int)1);
HXLINE( 201)				if (hx::IsNull( registeredFont )) {
HXLINE( 201)					continue;
            				}
HXLINE( 203)				bool _hx_tmp;
HXDLIN( 203)				if ((registeredFont->name != name)) {
HXLINE( 203)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 203)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 203)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 203)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 203)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 203)					_hx_tmp = true;
            				}
HXDLIN( 203)				if (_hx_tmp) {
HXLINE( 205)					if (registeredFont->_hx___initialize()) {
HXLINE( 207)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 215)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 217)		if (hx::IsNotNull( font )) {
HXLINE( 219)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 220)			return font;
            		}
HXLINE( 226)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_231_findFontVariant)
HXLINE( 233)		::String fontName = format->font;
HXLINE( 234)		 ::Dynamic bold = format->bold;
HXLINE( 235)		 ::Dynamic italic = format->italic;
HXLINE( 237)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 239)		bool _hx_tmp;
HXDLIN( 239)		bool _hx_tmp1;
HXDLIN( 239)		if (bold) {
HXLINE( 239)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 239)			_hx_tmp1 = false;
            		}
HXDLIN( 239)		if (_hx_tmp1) {
HXLINE( 239)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 239)			_hx_tmp = false;
            		}
HXDLIN( 239)		if (_hx_tmp) {
HXLINE( 241)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 243)			bool _hx_tmp2;
HXDLIN( 243)			if (bold) {
HXLINE( 243)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 243)				_hx_tmp2 = false;
            			}
HXDLIN( 243)			if (_hx_tmp2) {
HXLINE( 245)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 247)				bool _hx_tmp3;
HXDLIN( 247)				if (italic) {
HXLINE( 247)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 247)					_hx_tmp3 = false;
            				}
HXDLIN( 247)				if (_hx_tmp3) {
HXLINE( 249)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 253)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_268_getFormatHeight)
HXLINE( 270)		Float ascent;
HXDLIN( 270)		Float descent;
HXDLIN( 270)		int leading;
HXLINE( 292)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 294)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 296)			ascent = (format->size * format->_hx___ascent);
HXLINE( 297)			descent = (format->size * format->_hx___descent);
            		}
            		else {
HXLINE( 299)			if (hx::IsNotNull( font )) {
HXLINE( 301)				ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * format->size);
HXLINE( 302)				descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * format->size));
            			}
            			else {
HXLINE( 306)				ascent = format->size;
HXLINE( 307)				descent = (format->size * ((Float)0.185));
            			}
            		}
HXLINE( 311)		leading = format->leading;
HXLINE( 319)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_324_getFont)
HXLINE( 326)		::String fontName = format->font;
HXLINE( 327)		 ::Dynamic bold = format->bold;
HXLINE( 328)		 ::Dynamic italic = format->italic;
HXLINE( 330)		if (hx::IsNull( fontName )) {
HXLINE( 330)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 331)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 333)		bool _hx_tmp;
HXDLIN( 333)		bool _hx_tmp1;
HXDLIN( 333)		if (bold) {
HXLINE( 333)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 333)			_hx_tmp1 = false;
            		}
HXDLIN( 333)		if (_hx_tmp1) {
HXLINE( 333)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 333)			_hx_tmp = false;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 335)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 336)			bold = false;
HXLINE( 337)			italic = false;
            		}
            		else {
HXLINE( 339)			bool _hx_tmp2;
HXDLIN( 339)			if (bold) {
HXLINE( 339)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 339)				_hx_tmp2 = false;
            			}
HXDLIN( 339)			if (_hx_tmp2) {
HXLINE( 341)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 342)				bold = false;
            			}
            			else {
HXLINE( 344)				bool _hx_tmp3;
HXDLIN( 344)				if (italic) {
HXLINE( 344)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 344)					_hx_tmp3 = false;
            				}
HXDLIN( 344)				if (_hx_tmp3) {
HXLINE( 346)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 347)					italic = false;
            				}
            				else {
HXLINE( 353)					bool _hx_tmp4;
HXDLIN( 353)					if (bold) {
HXLINE( 353)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= (int)-1)) {
HXLINE( 353)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 353)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 353)						_hx_tmp4 = false;
            					}
HXDLIN( 353)					if (_hx_tmp4) {
HXLINE( 355)						bold = false;
            					}
HXLINE( 359)					bool _hx_tmp5;
HXDLIN( 359)					if (italic) {
HXLINE( 359)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= (int)-1)) {
HXLINE( 359)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 359)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 359)						_hx_tmp5 = false;
            					}
HXDLIN( 359)					if (_hx_tmp5) {
HXLINE( 361)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 367)		::String font;
HXDLIN( 367)		if (italic) {
HXLINE( 367)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 367)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 368)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 369)		::String font1;
HXDLIN( 369)		if (bold) {
HXLINE( 369)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 369)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 369)		font = (font + font1);
HXLINE( 370)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 371)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 373)		::String font2;
HXDLIN( 373)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 373)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 373)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 373)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 373)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 373)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 373)			goto _hx_goto_58;
            		}
            		/* default */{
HXLINE( 373)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_58:;
HXDLIN( 373)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 382)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_387_getFontInstance)
HXLINE( 391)		 ::openfl::text::Font instance = null();
HXLINE( 392)		::Array< ::String > fontList = null();
HXLINE( 394)		bool _hx_tmp;
HXDLIN( 394)		if (hx::IsNotNull( format )) {
HXLINE( 394)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 394)			_hx_tmp = false;
            		}
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 396)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 398)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 402)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 403)			if (hx::IsNotNull( instance )) {
HXLINE( 403)				return instance;
            			}
HXLINE( 405)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 407)			{
HXLINE( 407)				::String _g = format->font;
HXDLIN( 407)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 412)					if (format->bold) {
HXLINE( 414)						if (format->italic) {
HXLINE( 416)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            						}
            						else {
HXLINE( 420)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            						}
            					}
            					else {
HXLINE( 426)						if (format->italic) {
HXLINE( 428)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            						}
            						else {
HXLINE( 432)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            						}
            					}
HXLINE( 412)					goto _hx_goto_60;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 447)					goto _hx_goto_60;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 454)					if (format->bold) {
HXLINE( 456)						if (format->italic) {
HXLINE( 458)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            						}
            						else {
HXLINE( 462)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            						}
            					}
            					else {
HXLINE( 468)						if (format->italic) {
HXLINE( 470)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            						}
            						else {
HXLINE( 474)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            						}
            					}
HXLINE( 454)					goto _hx_goto_60;
            				}
            				/* default */{
HXLINE( 491)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_60:;
            			}
HXLINE( 508)			if (hx::IsNotNull( fontList )) {
HXLINE( 510)				int _g1 = (int)0;
HXDLIN( 510)				while((_g1 < fontList->length)){
HXLINE( 510)					::String font = fontList->__get(_g1);
HXDLIN( 510)					_g1 = (_g1 + (int)1);
HXLINE( 512)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 514)					if (hx::IsNotNull( instance )) {
HXLINE( 516)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 517)						return instance;
            					}
            				}
            			}
HXLINE( 525)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 526)			if (hx::IsNotNull( instance )) {
HXLINE( 526)				return instance;
            			}
            		}
HXLINE( 530)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 533)		if (format->bold) {
HXLINE( 535)			if (format->italic) {
HXLINE( 537)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 541)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 547)			if (format->italic) {
HXLINE( 549)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 553)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 570)		{
HXLINE( 570)			int _g2 = (int)0;
HXDLIN( 570)			while((_g2 < fontList->length)){
HXLINE( 570)				::String font1 = fontList->__get(_g2);
HXDLIN( 570)				_g2 = (_g2 + (int)1);
HXLINE( 572)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 574)				if (hx::IsNotNull( instance )) {
HXLINE( 576)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 577)					return instance;
            				}
            			}
            		}
HXLINE( 583)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 587)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::lime::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::lime::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("restrictText","\x09","\x12","\x3e","\x34"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("trimText","\xaf","\xae","\x63","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("findFontVariant","\xbd","\x22","\xbb","\xb2"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_50_boot)
HXDLIN(  50)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_51_boot)
HXDLIN(  51)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_52_boot)
HXDLIN(  52)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXDLIN(  53)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_55_boot)
HXDLIN(  55)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
